# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2019-09-06 20:04
from __future__ import unicode_literals

import accelerator_abstract.models.base_expert_interest
import accelerator_abstract.models.secure_file_system_storage
import accelerator_abstract.utils
from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import embed_video.fields
import mptt.fields
import sitetree.models
import sorl.thumbnail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('fluent_pages', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('application_status', models.CharField(blank=True, choices=[('incomplete', 'Incomplete'), ('complete', 'Complete'), ('submitted', 'Submitted')], max_length=64, null=True)),
                ('submission_datetime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Applications',
                'db_table': 'accelerator_application',
                'ordering': ['startup'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_APPLICATION_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ApplicationAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('answer_text', models.CharField(blank=True, max_length=2000)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_APPLICATION_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Application Answers',
                'db_table': 'accelerator_applicationanswer',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_APPLICATIONANSWER_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ApplicationPanelAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('panel_slot_number', models.IntegerField(blank=True, null=True)),
                ('notes', models.CharField(blank=True, max_length=200)),
                ('remote_pitch', models.BooleanField(default=False)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_APPLICATION_MODEL)),
            ],
            options={
                'verbose_name_plural': 'assignments of startup applications to panel',
                'db_table': 'accelerator_applicationpanelassignment',
                'ordering': ('panel_slot_number',),
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_APPLICATIONPANELASSIGNMENT_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ApplicationQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('question_number', models.IntegerField()),
                ('section_heading', models.CharField(blank=True, max_length=40)),
                ('question_text', models.CharField(blank=True, max_length=200)),
                ('help_text', models.CharField(blank=True, max_length=1000)),
                ('question_type', models.CharField(choices=[('multiline', 'MultilineText'), ('multichoice', 'MultipleChoice'), ('number', 'Number')], max_length=64)),
                ('mandatory', models.BooleanField(default=False)),
                ('text_box_lines', models.IntegerField(default=1)),
                ('text_limit', models.IntegerField(default=500)),
                ('text_limit_units', models.CharField(blank=True, choices=[('characters', 'Characters'), ('words', 'Words')], max_length=64)),
                ('choice_options', models.CharField(blank=True, max_length=4000)),
                ('choice_layout', models.CharField(blank=True, choices=[('horizontal', 'Horizontal'), ('vertical', 'Vertical'), ('dropdown', 'Dropdown')], max_length=64)),
            ],
            options={
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_APPLICATIONQUESTION_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ApplicationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=500)),
            ],
            options={
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_APPLICATIONTYPE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='BaseProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('user_type', models.CharField(choices=[('EXPERT', 'Expert'), ('ENTREPRENEUR', 'Entrepreneur'), ('MEMBER', 'Member')], max_length=16)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='baseprofile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'accelerator_baseprofile',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_BASEPROFILE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='BucketState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('basis', models.CharField(choices=[('cycle', 'Cycle'), ('program', 'Program')], default='cycle', max_length=20)),
                ('name', models.CharField(blank=True, choices=[('stale_nostartup', 'Old Entrepreneurs'), ('stale_startup', 'Old Startups'), ('new_entrepreneurs', 'New Entrepreneurs'), ('unpaid', 'Active Unpaid Startups'), ('unsubmitted', 'Working on Application'), ('submitted', 'Has Submitted Application'), ('new_experts', 'New Experts')], default='unsubmitted', max_length=64, null=True)),
                ('group', models.CharField(default='Other', max_length=255)),
                ('sort_order', models.PositiveIntegerField()),
                ('last_update', models.DateTimeField()),
            ],
            options={
                'db_table': 'accelerator_bucketstate',
                'ordering': ['sort_order'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_BUCKETSTATE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='CategoryHeaderPage',
            fields=[
                ('urlnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fluent_pages.UrlNode')),
                ('is_category_header', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Category Header',
                'verbose_name_plural': 'Category Headers',
                'db_table': 'pagetype_accelerator_categoryheaderpage',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_CATEGORYHEADERPAGE_MODEL',
                'manager_inheritance_from_future': True,
            },
            bases=('fluent_pages.page',),
        ),
        migrations.CreateModel(
            name='Clearance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('level', models.CharField(choices=[('Exec/MD', 'Exec/MD'), ('Global Manager', 'Global Manager'), ('Program Operations Manager', 'Program Operations Manager'), ('Staff', 'Staff')], max_length=64)),
            ],
            options={
                'db_table': 'accelerator_clearance',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_CLEARANCE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Criterion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('type', models.CharField(max_length=64)),
                ('name', models.CharField(max_length=64)),
            ],
            options={
                'verbose_name': 'Application Allocator Criterion',
                'verbose_name_plural': 'Application Allocator Criteria',
                'db_table': 'accelerator_criterion',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_CRITERION_MODEL',
            },
        ),
        migrations.CreateModel(
            name='CriterionOptionSpec',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('option', models.CharField(blank=True, max_length=64)),
                ('count', models.IntegerField(default=1)),
                ('weight', models.FloatField(default=1.0)),
                ('criterion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_CRITERION_MODEL)),
            ],
            options={
                'verbose_name': 'Application Allocator Criterion Option',
                'db_table': 'accelerator_criterionoptionspec',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_CRITERIONOPTIONSPEC_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('abbr', models.CharField(max_length=3, unique=True)),
                ('usd_exchange', models.FloatField()),
            ],
            options={
                'db_table': 'accelerator_currency',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_CURRENCY_MODEL',
            },
        ),
        migrations.CreateModel(
            name='EntrepreneurProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('gender', models.CharField(choices=[('f', 'Female'), ('m', 'Male'), ('p', 'Prefer Not To State'), ('o', 'Other'), ('', 'Unknown')], default='', max_length=1)),
                ('phone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Digits and +()-.x only', regex='^[0-9x.+() -]+$')], verbose_name='Phone')),
                ('linked_in_url', models.URLField(blank=True, verbose_name='LinkedIn profile URL')),
                ('facebook_url', models.URLField(blank=True, verbose_name='Facebook profile URL')),
                ('twitter_handle', models.CharField(blank=True, max_length=40, verbose_name='Twitter handle')),
                ('personal_website_url', models.URLField(blank=True, max_length=255, verbose_name='Website URL')),
                ('landing_page', models.CharField(blank=True, max_length=200, validators=[django.core.validators.RegexValidator('^[^:]*$', 'Must be a page within the site')], verbose_name='Current landing page within the site')),
                ('image', sorl.thumbnail.fields.ImageField(blank=True, help_text='Suggested size: <400px on the short side', upload_to='profile_pics', verbose_name='Profile Picture')),
                ('drupal_id', models.IntegerField(blank=True, null=True)),
                ('drupal_creation_date', models.DateTimeField(blank=True, null=True)),
                ('drupal_last_login', models.DateTimeField(blank=True, null=True)),
                ('users_last_activity', models.DateTimeField(blank=True, null=True)),
                ('newsletter_sender', models.BooleanField(default=False)),
                ('bio', models.TextField(blank=True, default='')),
            ],
            options={
                'db_table': 'accelerator_entrepreneurprofile',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_ENTREPRENEURPROFILE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ExpertCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Expert Category',
                'verbose_name_plural': 'Expert Categories',
                'db_table': 'accelerator_expertcategory',
                'ordering': ['name'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_EXPERTCATEGORY_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ExpertInterest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('topics', models.TextField(blank=True, help_text='Please provide a list of topics of interest to yo')),
            ],
            options={
                'verbose_name_plural': 'Expert Interests',
                'db_table': 'accelerator_expertinterest',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_EXPERTINTEREST_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ExpertInterestType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=50)),
                ('short_description', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Expert Interest Types',
                'db_table': 'accelerator_expertinteresttype',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_EXPERTINTERESTTYPE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ExpertProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('gender', models.CharField(choices=[('f', 'Female'), ('m', 'Male'), ('p', 'Prefer Not To State'), ('o', 'Other'), ('', 'Unknown')], default='', max_length=1)),
                ('phone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Digits and +()-.x only', regex='^[0-9x.+() -]+$')], verbose_name='Phone')),
                ('linked_in_url', models.URLField(blank=True, verbose_name='LinkedIn profile URL')),
                ('facebook_url', models.URLField(blank=True, verbose_name='Facebook profile URL')),
                ('twitter_handle', models.CharField(blank=True, max_length=40, verbose_name='Twitter handle')),
                ('personal_website_url', models.URLField(blank=True, max_length=255, verbose_name='Website URL')),
                ('landing_page', models.CharField(blank=True, max_length=200, validators=[django.core.validators.RegexValidator('^[^:]*$', 'Must be a page within the site')], verbose_name='Current landing page within the site')),
                ('image', sorl.thumbnail.fields.ImageField(blank=True, help_text='Suggested size: <400px on the short side', upload_to='profile_pics', verbose_name='Profile Picture')),
                ('drupal_id', models.IntegerField(blank=True, null=True)),
                ('drupal_creation_date', models.DateTimeField(blank=True, null=True)),
                ('drupal_last_login', models.DateTimeField(blank=True, null=True)),
                ('users_last_activity', models.DateTimeField(blank=True, null=True)),
                ('newsletter_sender', models.BooleanField(default=False)),
                ('salutation', models.CharField(blank=True, max_length=255)),
                ('title', models.CharField(max_length=255, verbose_name='Professional Title')),
                ('company', models.CharField(max_length=255, verbose_name='Company Name')),
                ('privacy_email', models.CharField(choices=[('staff', 'MC Staff Only'), ('finalists and staff', 'Finalists and MC Staff'), ('public', 'All Users')], default='finalists and staff', max_length=64, verbose_name='Privacy - Email')),
                ('privacy_phone', models.CharField(choices=[('staff', 'MC Staff Only'), ('finalists and staff', 'Finalists and MC Staff'), ('public', 'All Users')], default='finalists and staff', max_length=64, verbose_name='Privacy - Phone')),
                ('privacy_web', models.CharField(choices=[('staff', 'MC Staff Only'), ('finalists and staff', 'Finalists and MC Staff'), ('public', 'All Users')], default='finalists and staff', max_length=64, verbose_name='Privacy - Web')),
                ('public_website_consent', models.BooleanField(default=False, verbose_name='Public Website Consent')),
                ('public_website_consent_checked', models.BooleanField(default=False, verbose_name='Public Website Consent Check')),
                ('judge_interest', models.BooleanField(default=False, help_text='I would like to participate in MassChallenge as a Judge', verbose_name='Judge')),
                ('mentor_interest', models.BooleanField(default=False, help_text='I would like to participate in MassChallenge as a Mentor', verbose_name='Mentor')),
                ('speaker_interest', models.BooleanField(default=False, help_text='I would like to participate in MassChallenge as a Speaker', verbose_name='Speaker')),
                ('speaker_topics', models.TextField(blank=True, help_text='Please describe the topic(s) you would be available to speak about', verbose_name='Speaker Topics')),
                ('office_hours_interest', models.BooleanField(default=False, help_text='I would like to participate in MassChallenge by holding Office Hours', verbose_name='Office Hours')),
                ('office_hours_topics', models.TextField(blank=True, help_text='Please describe the topic(s) you would be available to speak to Finalists about during Office Hours', verbose_name='Office Hour Topics')),
                ('expert_group', models.CharField(blank=True, max_length=10, verbose_name='Expert Group')),
                ('reliability', models.DecimalField(blank=True, decimal_places=2, default=Decimal('1.00'), max_digits=3, null=True)),
                ('referred_by', models.TextField(blank=True, help_text='If someone referred you to MassChallenge, please provide their name (and organization if relevant). Otherwise, please indicate how you learned about the opportunity to participate at MassChallenge (helps us understand the effectiveness of our outreach programs).', max_length=500)),
                ('other_potential_experts', models.TextField(blank=True, help_text="We're always looking for more great experts to join the MassChallenge community and program. We welcome the names and contact info (email) of individuals you think could be great additions to the program, as well as how you think they might want to be involved (Judge, Mentor, etc.) Also, please encourage these individuals to fill out their own Expert Profile.", max_length=500)),
                ('internal_notes', models.TextField(blank=True, help_text='Internal notes only for use by MassChallenge Staff (not visible to Expert)', max_length=500)),
                ('bio', models.TextField(blank=True, default='', validators=[django.core.validators.MaxLengthValidator(7500)])),
            ],
            options={
                'db_table': 'accelerator_expertprofile',
                'permissions': (('change_password', 'Can change users passwords directly'),),
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_EXPERTPROFILE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='FilePage',
            fields=[
                ('urlnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fluent_pages.UrlNode')),
                ('file', models.FileField(storage=accelerator_abstract.models.secure_file_system_storage.SecureFileSystemStorage(location='/var/www/cms-files'), upload_to='%Y-%m')),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'File',
                'verbose_name_plural': 'Files',
                'db_table': 'pagetype_accelerator_filepage',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_FILEPAGE_MODEL',
                'manager_inheritance_from_future': True,
            },
            bases=('fluent_pages.page',),
        ),
        migrations.CreateModel(
            name='FunctionalExpertise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to=settings.MPTT_SWAPPABLE_FUNCTIONALEXPERTISE_MODEL)),
            ],
            options={
                'db_table': 'accelerator_functionalexpertise',
                'abstract': False,
                'managed': True,
                'swappable': 'MPTT_SWAPPABLE_FUNCTIONALEXPERTISE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Industry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to=settings.MPTT_SWAPPABLE_INDUSTRY_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Industries',
                'db_table': 'accelerator_industry',
                'abstract': False,
                'swappable': 'MPTT_SWAPPABLE_INDUSTRY_MODEL',
            },
        ),
        migrations.CreateModel(
            name='InterestCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=127)),
                ('description', models.CharField(blank=True, max_length=500)),
            ],
            options={
                'verbose_name_plural': 'Interest Categories',
                'db_table': 'accelerator_interestcategory',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_INTERESTCATEGORY_MODEL',
            },
        ),
        migrations.CreateModel(
            name='JobPosting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('postdate', models.DateTimeField()),
                ('type', models.CharField(choices=[('NONE', 'None'), ('INTERNSHIP', 'An internship'), ('PART_TIME_PERMANENT', 'A part-time permanent position'), ('FULL_TIME_PERMANENT', 'A full-time permanent position'), ('PART_TIME_CONTRACT', 'A part-time contract position'), ('FULL_TIME_CONTRACT', 'A full-time contract position')], max_length=20)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('applicationemail', models.EmailField(blank=True, max_length=100, null=True, verbose_name='Email address')),
                ('more_info_url', models.URLField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'Job postings for startups',
                'db_table': 'accelerator_jobposting',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_JOBPOSTING_MODEL',
            },
        ),
        migrations.CreateModel(
            name='JudgeApplicationFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('judging_status', models.IntegerField(blank=True, choices=[(1, 'No Conflict'), (2, 'Not Judged - Conflict of Interest'), (3, 'Not Judged - Other (eg., no show)')], null=True)),
                ('feedback_status', models.CharField(choices=[('COMPLETE', 'COMPLETE'), ('INCOMPLETE', 'INCOMPLETE'), ('NOT-JUDGED-CONFLICT', 'NOT JUDGED, CONFLICT'), ('NOT-JUDGED-OTHER', 'NOT JUDGED, OTHER')], editable=False, max_length=20)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_APPLICATION_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Judge Application Feedback',
                'db_table': 'accelerator_judgeapplicationfeedback',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_JUDGEAPPLICATIONFEEDBACK_MODEL',
            },
        ),
        migrations.CreateModel(
            name='JudgeAvailability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('availability_type', models.CharField(choices=[('Available', 'Available'), ('Not Available', 'Not Available'), ('Preferred', 'Preferred')], max_length=32)),
            ],
            options={
                'verbose_name_plural': 'Judge availability for specific Panel types, times, locations',
                'db_table': 'accelerator_judgeavailability',
                'ordering': ['panel_time__start_date_time', 'panel_type__panel_type', 'panel_location__location'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_JUDGEAVAILABILITY_MODEL',
            },
        ),
        migrations.CreateModel(
            name='JudgeFeedbackComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('answer_text', models.TextField(blank=True)),
                ('original_answer_text', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Feedback Components',
                'db_table': 'accelerator_judgefeedbackcomponent',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_JUDGEFEEDBACKCOMPONENT_MODEL',
            },
        ),
        migrations.CreateModel(
            name='JudgePanelAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('assignment_status', models.CharField(blank=True, choices=[('ASSIGNED', 'ASSIGNED'), ('COMPLETE', 'COMPLETE')], default='', max_length=16)),
                ('panel_sequence_number', models.PositiveIntegerField(blank=True, help_text='Indicate in which order this panel should be completed by this judge', null=True)),
                ('judge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'assignments of judge to panel',
                'db_table': 'accelerator_judgepanelassignment',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_JUDGEPANELASSIGNMENT_MODEL',
            },
        ),
        migrations.CreateModel(
            name='JudgeRoundCommitment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('commitment_state', models.BooleanField(default=True)),
                ('capacity', models.IntegerField(default=0)),
                ('current_quota', models.IntegerField(blank=True, null=True)),
                ('judge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Judge commitment to participate in a Judging Round',
                'db_table': 'accelerator_judgeroundcommitment',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_JUDGEROUNDCOMMITMENT_MODEL',
            },
        ),
        migrations.CreateModel(
            name='JudgingForm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=500)),
            ],
            options={
                'verbose_name_plural': 'Judging Forms',
                'db_table': 'accelerator_judgingform',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_JUDGINGFORM_MODEL',
            },
        ),
        migrations.CreateModel(
            name='JudgingFormElement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('element_number', models.IntegerField()),
                ('element_name', models.CharField(blank=True, max_length=50)),
                ('dashboard_label', models.CharField(blank=True, max_length=50)),
                ('section_heading', models.CharField(blank=True, max_length=40)),
                ('question_text', models.CharField(blank=True, max_length=200)),
                ('help_text', models.CharField(blank=True, max_length=1000)),
                ('element_type', models.CharField(choices=[('answer', 'Application Answer'), ('boilerplate', 'Boilerplate'), ('feedback', 'Feedback')], max_length=64)),
                ('feedback_type', models.CharField(blank=True, choices=[('multiline', 'MultilineText'), ('multichoice', 'MultipleChoice'), ('number', 'Number')], max_length=64)),
                ('display_value', models.CharField(choices=[('omit', 'Omit'), ('value', 'Value'), ('yesno', 'Yes/No')], max_length=64)),
                ('score_element', models.BooleanField(default=False)),
                ('mandatory', models.BooleanField(default=False)),
                ('text_box_lines', models.IntegerField(blank=True, default=0, null=True)),
                ('text_limit', models.IntegerField(blank=True, default=0, null=True)),
                ('text_limit_units', models.CharField(blank=True, choices=[('characters', 'Characters'), ('words', 'Words')], max_length=64)),
                ('text_minimum', models.IntegerField(blank=True, default=0, null=True)),
                ('text_minimum_units', models.CharField(blank=True, choices=[('characters', 'Characters'), ('words', 'Words')], max_length=64)),
                ('choice_options', models.CharField(blank=True, max_length=200)),
                ('choice_layout', models.CharField(blank=True, choices=[('horizontal', 'Horizontal'), ('vertical', 'Vertical'), ('dropdown', 'Dropdown')], max_length=64)),
                ('sharing', models.CharField(blank=True, choices=[('share-with-startup', 'Share with Startup'), ('administrator-only', 'Share with Program Administrators')], max_length=64)),
                ('application_question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_APPLICATIONQUESTION_MODEL)),
                ('form_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_JUDGINGFORM_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Judging Form Elements',
                'db_table': 'accelerator_judgingformelement',
                'ordering': ['form_type', 'element_number'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_JUDGINGFORMELEMENT_MODEL',
            },
        ),
        migrations.CreateModel(
            name='JudgingRound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('cycle_based_round', models.BooleanField(default=False, help_text="Include startups from all programs in this Program's cycle")),
                ('name', models.CharField(max_length=60)),
                ('start_date_time', models.DateTimeField(default=None)),
                ('end_date_time', models.DateTimeField(default=None)),
                ('is_active', models.BooleanField(default=False)),
                ('round_type', models.CharField(choices=[('Online', 'Online'), ('In-Person', 'In-Person')], max_length=10)),
                ('allow_dynamic_allocation', models.BooleanField(default=False, help_text='Check this button to allow judges to get new applications without manual allocation by staff.')),
                ('buffer_before_event', models.IntegerField(choices=[(0, 0), (15, 15), (30, 30), (45, 45), (60, 60), (75, 75), (90, 90), (105, 105), (120, 120)], default=30, help_text='Choose a time in increments of 15 minutes.')),
                ('recruit_judges', models.CharField(choices=[('NO', 'Do not recruit judges or display prior commitments'), ('ANYONE', 'Recruit any expert'), ('APPROVEDONLY', 'Recruit only approved judges'), ('DISPLAYONLY', 'Only display judges prior commitments')], default='NO', max_length=16)),
                ('recruiting_prompt', models.TextField(blank=True, help_text='You may use HTML, including links')),
                ('positive_recruiting_prompt', models.TextField(blank=True, help_text='You may use HTML, including links', verbose_name='Positive Recruiting Response Label')),
                ('negative_recruiting_prompt', models.TextField(blank=True, help_text='You may use HTML, including links', verbose_name='Negative Recruiting Response Label')),
                ('capture_capacity', models.BooleanField(default=False)),
                ('capacity_prompt', models.TextField(blank=True, help_text='You may use HTML, including links')),
                ('capacity_options', models.CharField(blank=True, help_text="Provide a list of integers, separated by '|' (like 10|20|30)", max_length=255, validators=[accelerator_abstract.utils.validate_capacity_options])),
                ('capture_availability', models.CharField(choices=[('disabled', 'Disabled'), ('location-only', 'Capture location only'), ('time-only', 'Capture time only'), ('type-only', 'Capture type only')], default='disabled', max_length=32)),
                ('feedback_display', models.CharField(choices=[('disabled', 'Disabled'), ('enabled', 'Enabled')], default='disabled', max_length=10)),
                ('feedback_display_message', models.TextField(blank=True, help_text='You may use HTML, including links (not relevant if merged with another round)')),
                ('feedback_display_items', models.CharField(blank=True, choices=[('feedback-and-judge-category', 'Judge Category and Feedback'), ('feedback-only', 'Only Feedback'), ('judge-category-only', 'Only Judge Category')], help_text='Not relevant if merged with another round', max_length=64)),
                ('judge_instructions', models.TextField(blank=True, help_text='Instructions to present to judges in this round on their judging portal.')),
                ('presentation_mins', models.IntegerField(blank=True, default=20, help_text='Duration of startup pitch to judges, in minutes')),
                ('buffer_mins', models.IntegerField(blank=True, default=10, help_text='Time between startup pitches, in minutes')),
                ('break_mins', models.IntegerField(blank=True, default=10, help_text="Duration of judges' coffee break(s), in minutes")),
                ('num_breaks', models.IntegerField(blank=True, default=1, help_text='Number of breaks the judges will be given during a judging panel')),
                ('collision_detection_mode', models.CharField(choices=[('scenario', 'Check that applications are not added to a scenario twice'), ('panel_time', 'Check that applications are not added to the same panel time within active scenarios twice'), ('panel_slot', 'Check that applications are not added to the same panel time and slot within active scenarios twice')], default='scenario', max_length=10)),
            ],
            options={
                'verbose_name_plural': 'Judging Rounds',
                'db_table': 'accelerator_judginground',
                'ordering': ['program__program_status', '-program__end_date', '-end_date_time', 'name'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_JUDGINGROUND_MODEL',
            },
        ),
        migrations.CreateModel(
            name='LegalCheck',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(default='', help_text='Internal name for this check.', max_length=128, unique=True)),
                ('description', models.TextField(help_text='Text displayed next to checkbox. Use HTML for links.')),
                ('is_enabled_for_experts', models.BooleanField(default=True, help_text='This legal check is for Experts (Judges and Mentors)')),
                ('is_enabled_for_entrepreneurs', models.BooleanField(default=True, help_text='This legal check is for Entrepreneurs (people with Startups applying to MassChallenge)')),
            ],
            options={
                'verbose_name': 'Legal Check',
                'db_table': 'accelerator_legalcheck',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_LEGALCHECK_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=100)),
                ('city', models.CharField(blank=True, default='', max_length=100)),
                ('state', models.CharField(blank=True, default='', help_text='State/Region/Province', max_length=100)),
                ('country', models.CharField(blank=True, default='', max_length=100)),
                ('postcode', models.CharField(blank=True, default='', max_length=20)),
                ('latitude', models.CharField(blank=True, default='', max_length=100)),
                ('longitude', models.CharField(blank=True, default='', max_length=100)),
                ('timezone', models.CharField(default='UTC', help_text='Timezone name from Olson Timezone database (https://en.wikipedia.org/wiki/Tz_database, https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)', max_length=35)),
            ],
            options={
                'verbose_name_plural': 'locations',
                'db_table': 'accelerator_location',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_LOCATION_MODEL',
            },
        ),
        migrations.CreateModel(
            name='MemberProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('gender', models.CharField(choices=[('f', 'Female'), ('m', 'Male'), ('p', 'Prefer Not To State'), ('o', 'Other'), ('', 'Unknown')], default='', max_length=1)),
                ('phone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Digits and +()-.x only', regex='^[0-9x.+() -]+$')], verbose_name='Phone')),
                ('linked_in_url', models.URLField(blank=True, verbose_name='LinkedIn profile URL')),
                ('facebook_url', models.URLField(blank=True, verbose_name='Facebook profile URL')),
                ('twitter_handle', models.CharField(blank=True, max_length=40, verbose_name='Twitter handle')),
                ('personal_website_url', models.URLField(blank=True, max_length=255, verbose_name='Website URL')),
                ('landing_page', models.CharField(blank=True, max_length=200, validators=[django.core.validators.RegexValidator('^[^:]*$', 'Must be a page within the site')], verbose_name='Current landing page within the site')),
                ('image', sorl.thumbnail.fields.ImageField(blank=True, help_text='Suggested size: <400px on the short side', upload_to='profile_pics', verbose_name='Profile Picture')),
                ('drupal_id', models.IntegerField(blank=True, null=True)),
                ('drupal_creation_date', models.DateTimeField(blank=True, null=True)),
                ('drupal_last_login', models.DateTimeField(blank=True, null=True)),
                ('users_last_activity', models.DateTimeField(blank=True, null=True)),
                ('newsletter_sender', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'accelerator_memberprofile',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_MEMBERPROFILE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='MentoringSpecialties',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Mentoring Specialty',
                'verbose_name_plural': 'Mentoring Specialties',
                'db_table': 'accelerator_mentoringspecialties',
                'ordering': ['name'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_MENTORINGSPECIALTIES_MODEL',
            },
        ),
        migrations.CreateModel(
            name='MentorProgramOfficeHour',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('start_date_time', models.DateTimeField(db_index=True)),
                ('end_date_time', models.DateTimeField(db_index=True)),
                ('description', models.TextField(blank=True)),
                ('old_location', models.CharField(choices=[('MassChallenge Boston', 'MassChallenge Boston'), ('MassChallenge Israel - Jerusalem', 'MassChallenge Israel - Jerusalem'), ('MassChallenge Israel - Tel Aviv', 'MassChallenge Israel - Tel Aviv'), ('MassChallenge Mexico', 'MassChallenge Mexico'), ('MassChallenge Rhode Island', 'MassChallenge Rhode Island'), ('MassChallenge Switzerland', 'MassChallenge Switzerland'), ('MassChallenge Texas - Austin', 'MassChallenge Texas - Austin'), ('MassChallenge Texas - Houston', 'MassChallenge Texas - Houston'), ('Remote - see description', 'Remote - see description'), ('Other - see description', 'Other - see description')], max_length=50)),
                ('notify_reservation', models.BooleanField(default=True)),
                ('topics', models.CharField(blank=True, max_length=500)),
                ('finalist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='finalist_officehours', to=settings.AUTH_USER_MODEL, verbose_name='Finalist')),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_officehours', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Office Hour',
                'db_table': 'accelerator_mentorprogramofficehour',
                'ordering': ['start_date_time'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_MENTORPROGRAMOFFICEHOUR_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ModelChange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('status', models.CharField(choices=[('OLD', 'OLD'), ('MIGRATING', 'MIGRATING'), ('DONE', 'DONE'), ('ERROR', 'ERROR')], default='OLD', max_length=64)),
            ],
            options={
                'db_table': 'accelerator_modelchange',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_MODELCHANGE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='NamedGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(default='', max_length=255)),
            ],
            options={
                'db_table': 'accelerator_namedgroup',
                'ordering': ['name'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_NAMEDGROUP_MODEL',
            },
        ),
        migrations.CreateModel(
            name='NavTree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(blank=True, help_text='Site tree title for presentational purposes.', max_length=100, verbose_name='Title')),
                ('alias', models.CharField(db_index=True, help_text='Short name to address site tree from templates.<br /><b>Note:</b> change with care.', max_length=80, unique=True, verbose_name='Alias')),
            ],
            options={
                'verbose_name_plural': 'NavTrees',
                'db_table': 'accelerator_navtree',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_NAVTREE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='NavTreeItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(help_text='Site tree item title. Can contain template variables E.g.: {{ mytitle }}.', max_length=100, verbose_name='Title')),
                ('hint', models.CharField(blank=True, default='', help_text='Some additional information about this item that is used as a hint.', max_length=200, verbose_name='Hint')),
                ('url', models.CharField(db_index=True, help_text='Exact URL or URL pattern (see "Additional settings") for this item.', max_length=200, verbose_name='URL')),
                ('urlaspattern', models.BooleanField(db_index=True, default=False, help_text='Whether the given URL should be treated as a pattern.<br /><b>Note:</b> Refer to Django "URL dispatcher" documentation (e.g. "Naming URL patterns" part).', verbose_name='URL as Pattern')),
                ('hidden', models.BooleanField(db_index=True, default=False, help_text='Whether to show this item in navigation.', verbose_name='Hidden')),
                ('alias', sitetree.models.CharFieldNullable(blank=True, db_index=True, help_text='Short name to address site tree item from a template.<br /><b>Reserved aliases:</b> "trunk", "this-children", "this-siblings", "this-ancestor-children", "this-parent-siblings".', max_length=80, null=True, verbose_name='Alias')),
                ('description', models.TextField(blank=True, default='', help_text='Additional comments on this item.', verbose_name='Description')),
                ('inmenu', models.BooleanField(db_index=True, default=True, help_text='Whether to show this item in a menu.', verbose_name='Show in menu')),
                ('inbreadcrumbs', models.BooleanField(db_index=True, default=True, help_text='Whether to show this item in a breadcrumb path.', verbose_name='Show in breadcrumb path')),
                ('insitetree', models.BooleanField(db_index=True, default=True, help_text='Whether to show this item in a site tree.', verbose_name='Show in site tree')),
                ('access_loggedin', models.BooleanField(db_index=True, default=False, help_text='Check it to grant access to this item to authenticated users only.', verbose_name='Logged in only')),
                ('access_guest', models.BooleanField(db_index=True, default=False, help_text='Check it to grant access to this item to guests only.', verbose_name='Guests only')),
                ('access_restricted', models.BooleanField(db_index=True, default=False, help_text='Check it to restrict user access to this item, using Django permissions system.', verbose_name='Restrict access to permissions')),
                ('access_perm_type', models.IntegerField(choices=[(1, 'Any'), (2, 'All')], default=1, help_text='<b>Any</b> &mdash; user should have any of chosen permissions. <b>All</b> &mdash; user should have all chosen permissions.', verbose_name='Permissions interpretation')),
                ('sort_order', models.IntegerField(db_index=True, default=0, help_text='Item position among other site tree items under the same parent.', verbose_name='Sort order')),
                ('active_program', models.BooleanField(default=False)),
                ('display_single_item', models.BooleanField(default=True)),
                ('access_permissions', models.ManyToManyField(blank=True, to='auth.Permission', verbose_name='Permissions granting access')),
                ('parent', models.ForeignKey(blank=True, help_text='Parent site tree item.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='navtreeitem_parent', to=settings.ACCELERATOR_NAVTREEITEM_MODEL, verbose_name='Parent')),
            ],
            options={
                'verbose_name_plural': 'NavTreeItems',
                'db_table': 'accelerator_navtreeitem',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_NAVTREEITEM_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Newsletter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=127)),
                ('subject', models.CharField(blank=True, help_text='Best practice: keep subject lines short', max_length=500)),
                ('from_addr', models.CharField(blank=True, max_length=255, null=True)),
                ('cc_addrs', models.CharField(blank=True, help_text='Zero or more email addresses to CC; separate with commas', max_length=500, null=True)),
                ('date_mailed', models.DateTimeField(blank=True, editable=False, null=True)),
            ],
            options={
                'db_table': 'accelerator_newsletter',
                'ordering': ('-created_at', 'name'),
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_NEWSLETTER_MODEL',
            },
        ),
        migrations.CreateModel(
            name='NewsletterReceipt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('newsletter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_NEWSLETTER_MODEL)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'accelerator_newsletterreceipt',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_NEWSLETTERRECEIPT_MODEL',
            },
        ),
        migrations.CreateModel(
            name='NodePublishedFor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'Node is Published For',
                'verbose_name_plural': 'Node is Published For',
                'db_table': 'accelerator_nodepublishedfor',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_NODEPUBLISHEDFOR_MODEL',
            },
        ),
        migrations.CreateModel(
            name='NodeSubNavAssociation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'Node Sub Navigation Association',
                'verbose_name_plural': 'Node Sub Navigation Associations',
                'db_table': 'accelerator_nodesubnavassociation',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_NODESUBNAVASSOCIATION_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Observer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=100, verbose_name='Email address')),
                ('title', models.CharField(blank=True, max_length=50)),
                ('company', models.CharField(blank=True, max_length=50)),
                ('newsletter_sender', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Observer',
                'verbose_name_plural': 'Observers',
                'db_table': 'accelerator_observer',
                'ordering': ['last_name', 'first_name'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_OBSERVER_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('website_url', models.URLField(blank=True, max_length=100, verbose_name='Website URL')),
                ('twitter_handle', models.CharField(blank=True, help_text='Omit the "@". We\'ll add it.', max_length=40, verbose_name='Twitter handle')),
                ('public_inquiry_email', models.EmailField(blank=True, max_length=100, verbose_name='Email address')),
                ('url_slug', models.CharField(blank=True, default='', max_length=64, unique=True, validators=[django.core.validators.RegexValidator(message='Letters, numbers, and dashes only.', regex='^[\\w-]+$')])),
            ],
            options={
                'verbose_name_plural': 'Organizations',
                'db_table': 'accelerator_organization',
                'ordering': ['name'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_ORGANIZATION_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Panel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('description', models.CharField(blank=True, max_length=30)),
                ('status', models.CharField(choices=[('NOT STARTED', 'NOT STARTED'), ('PREVIEW', 'PREVIEW'), ('ACTIVE', 'ACTIVE'), ('COMPLETED', 'COMPLETED')], default='NOT STARTED', max_length=30)),
                ('applications', models.ManyToManyField(related_name='panels', through='accelerator.ApplicationPanelAssignment', to=settings.ACCELERATOR_APPLICATION_MODEL)),
                ('judges', models.ManyToManyField(related_name='panels', through='accelerator.JudgePanelAssignment', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Panels',
                'db_table': 'accelerator_panel',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PANEL_MODEL',
            },
        ),
        migrations.CreateModel(
            name='PanelLocation',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('location', models.CharField(max_length=225, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=225)),
            ],
            options={
                'verbose_name_plural': 'Panel Locations',
                'db_table': 'accelerator_panellocation',
                'ordering': ['judging_round', 'description'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PANELLOCATION_MODEL',
            },
        ),
        migrations.CreateModel(
            name='PanelTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('day', models.CharField(max_length=255)),
                ('time', models.CharField(max_length=255)),
                ('start_date_time', models.DateTimeField(null=True)),
                ('end_date_time', models.DateTimeField(null=True)),
            ],
            options={
                'verbose_name_plural': 'Panel Times',
                'db_table': 'accelerator_paneltime',
                'ordering': ['judging_round', 'start_date_time'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PANELTIME_MODEL',
            },
        ),
        migrations.CreateModel(
            name='PanelType',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('panel_type', models.CharField(max_length=225, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=225)),
            ],
            options={
                'verbose_name_plural': 'Panel Types',
                'db_table': 'accelerator_paneltype',
                'ordering': ['judging_round', 'description'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PANELTYPE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('description', models.TextField(blank=True, help_text='This is the generic description of the Partner, shared across all Programs.', max_length=1000)),
                ('partner_logo', sorl.thumbnail.fields.ImageField(blank=True, upload_to='startup_pics', verbose_name='Partner Logo')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_ORGANIZATION_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Partners',
                'db_table': 'accelerator_partner',
                'ordering': ['organization__name'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PARTNER_MODEL',
            },
        ),
        migrations.CreateModel(
            name='PartnerTeamMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('partner_administrator', models.BooleanField(default=False)),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PARTNER_MODEL)),
                ('team_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Partner Team Members',
                'db_table': 'accelerator_partnerteammember',
                'ordering': ['team_member__last_name', 'team_member__first_name'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PARTNERTEAMMEMBER_MODEL',
            },
        ),
        migrations.CreateModel(
            name='PayPalPayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('token', models.CharField(max_length=100)),
                ('transaction', models.CharField(blank=True, max_length=100)),
                ('amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=7)),
                ('currency_code', models.CharField(default='', max_length=3)),
                ('refundable', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'accelerator_paypalpayment',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PAYPALPAYMENT_MODEL',
            },
        ),
        migrations.CreateModel(
            name='PayPalRefund',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('status', models.CharField(blank=True, max_length=100)),
                ('transaction', models.CharField(blank=True, max_length=100)),
                ('correlation', models.CharField(blank=True, max_length=100)),
                ('amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=7)),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PAYPALPAYMENT_MODEL)),
            ],
            options={
                'db_table': 'accelerator_paypalrefund',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PAYPALREFUND_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=500)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('location', models.CharField(max_length=50)),
                ('program_status', models.CharField(choices=[('upcoming', 'Upcoming'), ('active', 'Active'), ('ended', 'Ended'), ('hidden', 'Hidden')], max_length=64)),
                ('alumni_eligible_program', models.BooleanField(default=False, help_text='Finalists will be added to our Global Alumni Program upon this program being set to "Ended"')),
                ('currency_code', models.CharField(max_length=3)),
                ('early_application_fee', models.DecimalField(decimal_places=2, max_digits=7)),
                ('regular_application_fee', models.DecimalField(decimal_places=2, max_digits=7)),
                ('regular_fee_suffix', models.CharField(blank=True, max_length=20)),
                ('interested_judge_message', models.TextField(blank=True, help_text='You may use HTML, including links')),
                ('approved_judge_message', models.TextField(blank=True, help_text='You may use HTML, including links')),
                ('interested_mentor_message', models.TextField(blank=True, help_text='You may use HTML, including links')),
                ('approved_mentor_message', models.TextField(blank=True, help_text='You may use HTML, including links')),
                ('interested_speaker_message', models.TextField(blank=True, help_text='You may use HTML, including links')),
                ('approved_speaker_message', models.TextField(blank=True, help_text='You may use HTML, including links')),
                ('interested_office_hours_message', models.TextField(blank=True, help_text='You may use HTML, including links')),
                ('approved_office_hours_message', models.TextField(blank=True, help_text='You may use HTML, including links')),
                ('refund_code_support', models.CharField(choices=[('enabled', 'Enabled'), ('view-submitted-only', 'View Submitted Only'), ('disabled', 'Disabled')], default='enabled', max_length=64)),
                ('many_codes_per_partner', models.BooleanField(default=False, help_text='If true, then a given application may apply more than one refund code from the same partner for this program', verbose_name='Allow multiple refund codes per partner')),
                ('url_slug', models.CharField(default='', max_length=30)),
                ('accepting_mentors_and_goals', models.BooleanField(default=False)),
                ('overview_start_date', models.DateTimeField(blank=True, help_text='Time is in UTC', null=True)),
                ('overview_deadline_date', models.DateTimeField(blank=True, help_text='Time is in UTC', null=True)),
                ('eventbrite_organizer_id', models.CharField(blank=True, max_length=20, null=True)),
                ('program_overview_link', models.URLField(blank=True, help_text='URL of the program overview page, ex: https://masschallenge.org/programs-boston', max_length=255, null=True)),
            ],
            options={
                'verbose_name_plural': 'Programs',
                'db_table': 'accelerator_program',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PROGRAM_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ProgramCycle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=128)),
                ('short_name', models.CharField(blank=True, max_length=32, null=True)),
                ('applications_open', models.BooleanField(default=False)),
                ('application_open_date', models.DateTimeField(blank=True, null=True)),
                ('application_early_deadline_date', models.DateTimeField(blank=True, null=True)),
                ('application_final_deadline_date', models.DateTimeField(blank=True, null=True)),
                ('advertised_final_deadline', models.DateTimeField(blank=True, null=True)),
                ('accepting_references', models.BooleanField(default=False)),
                ('hidden', models.BooleanField(default=False)),
                ('default_application_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='application_type_for', to=settings.ACCELERATOR_APPLICATIONTYPE_MODEL)),
                ('default_overview_application_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='default_overview_application_type_for', to=settings.ACCELERATOR_APPLICATIONTYPE_MODEL)),
            ],
            options={
                'verbose_name_plural': 'program cycles',
                'db_table': 'accelerator_programcycle',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PROGRAMCYCLE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ProgramFamily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=128)),
                ('short_description', models.TextField(blank=True, help_text='You may use HTML, including links')),
                ('url_slug', models.CharField(default='', max_length=30)),
                ('email_domain', models.CharField(default='', help_text='Base domain for role-based email', max_length=30)),
                ('phone_number', models.CharField(default='', help_text='Phone number for this program (local form)', max_length=30)),
                ('physical_address', models.TextField(default='')),
                ('office_hour_bcc', models.EmailField(blank=True, help_text='An email address to bcc whenever office hours are created, deleted, or modified in this program family', max_length=100, null=True)),
                ('is_open_for_startups', models.BooleanField(default=False, help_text='Whether this ProgramFamily should be available to entrepreneurs')),
                ('is_open_for_experts', models.BooleanField(default=False, help_text='Whether this ProgramFamily should be available to experts')),
                ('use_site_tree_side_nav', models.BooleanField(default=False, help_text='Show the new-style side navigation')),
                ('timezone', models.CharField(default='UTC', help_text='Timezone name from Olson Timezone database (https://en.wikipedia.org/wiki/Tz_database)', max_length=35)),
            ],
            options={
                'verbose_name_plural': 'program families',
                'db_table': 'accelerator_programfamily',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PROGRAMFAMILY_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ProgramFamilyLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('primary', models.BooleanField()),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_LOCATION_MODEL)),
                ('program_family', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAMFAMILY_MODEL)),
            ],
            options={
                'verbose_name': 'Program Family Location',
                'verbose_name_plural': 'Program Family Locations',
                'db_table': 'accelerator_programfamilylocation',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PROGRAMFAMILYLOCATION_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ProgramOverride',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=50)),
                ('applications_open', models.BooleanField(default=False)),
                ('application_open_date', models.DateTimeField(blank=True, null=True)),
                ('application_early_deadline_date', models.DateTimeField(blank=True, null=True)),
                ('application_final_deadline_date', models.DateTimeField(blank=True, null=True)),
                ('early_application_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=7)),
                ('regular_application_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=7)),
                ('cycle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='program_overrides', to=settings.ACCELERATOR_PROGRAMCYCLE_MODEL)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Program Overrides',
                'db_table': 'accelerator_programoverride',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PROGRAMOVERRIDE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ProgramPartner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('description', models.TextField(blank=True, help_text='This is the description of the Partner SPECIFICALLY IN THE CONTEXT OF THE PROGRAM. (Distinct from the generic description of the Partner.) For example, description of In-Kind sponsorship deals specific to a Program would go here.', max_length=2000)),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PARTNER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Program Partner',
                'db_table': 'accelerator_programpartner',
                'ordering': ['program__name', 'partner_type__sort_order', 'partner'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PROGRAMPARTNER_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ProgramPartnerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('partner_type', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('feature_in_footer', models.BooleanField(default=False)),
                ('sort_order', models.IntegerField(blank=True, null=True)),
                ('badge_image', sorl.thumbnail.fields.ImageField(blank=True, upload_to='badge_images')),
                ('badge_display', models.CharField(choices=[('NONE', 'None'), ('PARTNER_LIST', 'Only on partner list'), ('PARTNER_PROFILE', 'Only on partner profile'), ('PARTNER_LIST_AND_PROFILE', 'Partner list and profile')], default='NONE', max_length=30)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Program Partner Types',
                'db_table': 'accelerator_programpartnertype',
                'ordering': ['program', 'sort_order'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PROGRAMPARTNERTYPE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ProgramRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
                ('landing_page', models.CharField(blank=True, max_length=255, null=True)),
                ('newsletter_recipient', models.BooleanField(default=False)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL)),
            ],
            options={
                'verbose_name': 'Program Role',
                'verbose_name_plural': 'Program Roles',
                'db_table': 'accelerator_programrole',
                'ordering': ['name'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PROGRAMROLE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ProgramRoleGrant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('program_role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAMROLE_MODEL)),
            ],
            options={
                'verbose_name': 'Program Role Grant',
                'verbose_name_plural': 'Program Role Grants',
                'db_table': 'accelerator_programrolegrant',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PROGRAMROLEGRANT_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ProgramStartupAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('attribute_type', models.CharField(choices=[('django.forms.CharField', 'Text Line'), ('django.forms.IntegerField', 'Integer'), ('django.forms.FloatField', 'Floating Point Value'), ('django.forms.BooleanField', 'True/False')], help_text='Select the type of information for this attribute', max_length=63, verbose_name='Type')),
                ('attribute_label', models.CharField(help_text='Provide a human-readable label for this attribute.  It must be unique for the selected Program', max_length=127, verbose_name='Label')),
                ('attribute_description', models.CharField(blank=True, help_text='Provide "help text" for this attribute', max_length=255, verbose_name='Description')),
                ('admin_viewable', models.BooleanField(default=False, help_text='Can Startup Administrators view this attribute for their own Startups?')),
                ('non_admin_viewable', models.BooleanField(default=False, help_text='Can Non-Startup Administrators view this attribute for their own Startups?')),
                ('staff_viewable', models.BooleanField(default=False, help_text='Can MC Staff view this attribute?')),
                ('finalist_viewable', models.BooleanField(default=False, help_text='Can Other Finalists view this attribute?')),
                ('mentor_viewable', models.BooleanField(default=False, help_text='Can Mentors view this attribute?')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL)),
            ],
            options={
                'db_table': 'accelerator_programstartupattribute',
                'ordering': ['program', 'attribute_label'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PROGRAMSTARTUPATTRIBUTE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ProgramStartupStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('startup_status', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('startup_list_include', models.BooleanField(default=False, help_text='Include this startup status as a tab in the public startup list')),
                ('startup_list_tab_title', models.CharField(max_length=50, null=True)),
                ('startup_list_tab_description', models.TextField(blank=True, help_text='You may use HTML, including links', max_length=1000)),
                ('startup_list_tab_id', models.CharField(help_text='The slug used in the public URL', max_length=30, null=True)),
                ('startup_list_tab_order', models.IntegerField(null=True)),
                ('include_stealth_startup_names', models.BooleanField(default=False)),
                ('badge_image', sorl.thumbnail.fields.ImageField(blank=True, upload_to='badge_images')),
                ('badge_display', models.CharField(choices=[('NONE', 'None'), ('STARTUP_LIST', 'Only on startup list'), ('STARTUP_PROFILE', 'Only on startup profile'), ('STARTUP_LIST_AND_PROFILE', 'Startup list and profile')], default='NONE', max_length=30)),
                ('status_group', models.CharField(blank=True, help_text='Only one status is shown from the same status group; which one is determined by sort order', max_length=50, null=True)),
                ('sort_order', models.IntegerField(blank=True, help_text='Order', null=True)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Program Startup Statuses',
                'db_table': 'accelerator_programstartupstatus',
                'ordering': ['program', 'sort_order', 'startup_status'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_PROGRAMSTARTUPSTATUS_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=200)),
                ('question_type', models.CharField(choices=[('multiline', 'MultilineText'), ('multichoice', 'MultipleChoice'), ('number', 'Number')], max_length=64)),
                ('choice_options', models.CharField(blank=True, max_length=4000)),
                ('choice_layout', models.CharField(blank=True, choices=[('horizontal', 'Horizontal'), ('vertical', 'Vertical'), ('dropdown', 'Dropdown')], max_length=64)),
            ],
            options={
                'db_table': 'accelerator_question',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_QUESTION_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('email', models.CharField(max_length=100, validators=[django.core.validators.EmailValidator()], verbose_name='Email address')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('title', models.CharField(max_length=50)),
                ('company', models.CharField(max_length=50)),
                ('reference_hash', models.CharField(max_length=50, unique=True)),
                ('sent', models.DateTimeField(blank=True, null=True)),
                ('accessed', models.DateTimeField(blank=True, null=True)),
                ('submitted', models.DateTimeField(blank=True, null=True)),
                ('confirmed_first_name', models.CharField(blank=True, max_length=50)),
                ('confirmed_last_name', models.CharField(blank=True, max_length=50)),
                ('confirmed_company', models.CharField(blank=True, max_length=50)),
                ('question_1_rating', models.IntegerField(null=True)),
                ('question_2_rating', models.IntegerField(null=True)),
                ('comments', models.TextField(blank=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_APPLICATION_MODEL)),
                ('requesting_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_REFERENCE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='RefundCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('unique_code', models.CharField(max_length=100, unique=True)),
                ('discount', models.IntegerField(default=0)),
                ('maximum_uses', models.PositiveIntegerField(blank=True, default=1, help_text='Indicate the maximum number of valid redemptions for this code. A null value is interpreted as unlimited.', null=True, verbose_name='Maximum Uses')),
                ('notes', models.CharField(blank=True, max_length=300)),
                ('internal', models.BooleanField(default=False, help_text='If set then this code is intended for internal use (e.g, Early Bird discount) and cannot be entered directly by users.')),
                ('issued_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PARTNER_MODEL)),
                ('programs', models.ManyToManyField(blank=True, help_text='Which programs is this refund code valid for? If no programs are given, then this code can be applied to any program.', related_name='refund_codes', to=settings.ACCELERATOR_PROGRAM_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Refund Codes',
                'db_table': 'accelerator_refundcode',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_REFUNDCODE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='RefundCodeRedemption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('refund_status', models.CharField(blank=True, choices=[('not_eligible', 'Not Eligible For Refund'), ('required', 'Refund Due'), ('instant', 'Refund Issued'), ('delayed', 'Refund Pending'), ('failed', 'Refund Failed')], max_length=32)),
                ('refund_transaction_id', models.CharField(blank=True, max_length=500)),
                ('refund_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=7)),
                ('cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAMCYCLE_MODEL)),
                ('refund_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='redemptions', to=settings.ACCELERATOR_REFUNDCODE_MODEL)),
            ],
            options={
                'db_table': 'accelerator_refundcoderedemption',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_REFUNDCODEREDEMPTION_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Scenario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=40)),
                ('description', models.TextField(blank=True, max_length=512)),
                ('is_active', models.BooleanField(default=False)),
                ('panel_size', models.IntegerField(blank=True, default=10)),
                ('max_panels_per_judge', models.IntegerField(blank=True, null=True)),
                ('min_panels_per_judge', models.IntegerField(blank=True, default=0)),
                ('sequence_number', models.PositiveIntegerField(blank=True, help_text='Indicate the order for this scenario within the round', null=True)),
            ],
            options={
                'db_table': 'accelerator_scenario',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_SCENARIO_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ScenarioApplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('priority', models.IntegerField(default=1)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_APPLICATION_MODEL)),
                ('scenario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_SCENARIO_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Scenario Applications',
                'db_table': 'accelerator_scenarioapplication',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_SCENARIOAPPLICATION_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ScenarioJudge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('judge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('scenario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_SCENARIO_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Scenario Judges',
                'db_table': 'accelerator_scenariojudge',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_SCENARIOJUDGE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ScenarioPreference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('priority', models.PositiveIntegerField()),
                ('constraint_type', models.CharField(choices=[('max', 'Maximum number of'), ('min', 'Minimum number of')], max_length=16)),
                ('entity_type', models.CharField(choices=[('JUDGE', 'judge'), ('APPLICATION', 'application')], max_length=16)),
                ('entity_set', models.CharField(choices=[('all', 'Judges Overall'), ('is_female', 'Judges that are Female'), ('is_lawyer', 'Judges that are Lawyers'), ('is_executive', 'Judges that are Executives'), ('is_investor', 'Judges that are Investors'), ('group_1', 'Judges in Group 1'), ('group_2', 'Judges in Group 2'), ('group_3', 'Judges in Group 3'), ('group_4', 'Judges in Group 4'), ('group_5', 'Judges in Group 5'), ('most_reliable', 'Judges that are the most reliable'), ('kinda_reliable', 'Judges that are kinda reliable'), ('not_reliable', 'Judges that are not reliable'), ('is_unassigned', 'Judges that were not assigned this round'), ('expert_in_industry', "Judges w/ expertise in the startup's primary industry"), ('also_knows_industry', "Judges w/ secondary expertise in the startup's primary industry"), ('in_program', 'Judges in program startup is applying to'), ('outside_program', 'Judges not in program startup is applying to')], max_length=32)),
                ('amount', models.PositiveIntegerField(blank=True, default=1, null=True)),
                ('scenario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_SCENARIO_MODEL)),
            ],
            options={
                'db_table': 'accelerator_scenariopreference',
                'ordering': ['priority'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_SCENARIOPREFERENCE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('heading', models.CharField(blank=True, max_length=255)),
                ('body', models.TextField(blank=True)),
                ('include_for', models.CharField(choices=[('EVERYONE', 'Everyone'), ('ANY_SPECIFIED_CATEGORY', 'Any specified category')], default='EVERYONE', max_length=32)),
                ('sequence', models.PositiveIntegerField(help_text='specify the order of this section in the newsletter')),
                ('interest_categories', models.ManyToManyField(blank=True, to=settings.ACCELERATOR_INTERESTCATEGORY_MODEL)),
                ('newsletter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to=settings.ACCELERATOR_NEWSLETTER_MODEL)),
            ],
            options={
                'db_table': 'accelerator_section',
                'ordering': ('newsletter', 'sequence'),
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_SECTION_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('security_key', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=500)),
                ('site_url', models.URLField(blank=True)),
            ],
            options={
                'db_table': 'accelerator_site',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_SITE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='SiteProgramAuthorization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('startup_profile_base_url', models.URLField()),
                ('sponsor_profile_base_url', models.URLField()),
                ('video_base_url', models.URLField()),
                ('startup_list', models.BooleanField(default=False)),
                ('startup_profiles', models.BooleanField(default=False)),
                ('startup_team_members', models.BooleanField(default=False)),
                ('mentor_list', models.BooleanField(default=False)),
                ('videos', models.BooleanField(default=False)),
                ('sponsor_list', models.BooleanField(default=False)),
                ('sponsor_profiles', models.BooleanField(default=False)),
                ('sponsor_logos', models.BooleanField(default=False)),
                ('jobs', models.BooleanField(default=False)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL)),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_SITE_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Site Program Authorizations',
                'db_table': 'accelerator_siteprogramauthorization',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_SITEPROGRAMAUTHORIZATION_MODEL',
            },
        ),
        migrations.CreateModel(
            name='SiteRedirectPage',
            fields=[
                ('urlnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fluent_pages.UrlNode')),
                ('new_url', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Site Redirect',
                'verbose_name_plural': 'Site Redirects',
                'db_table': 'pagetype_accelerator_siteredirectpage',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_SITEREDIRECTPAGE_MODEL',
                'manager_inheritance_from_future': True,
            },
            bases=('fluent_pages.page',),
        ),
        migrations.CreateModel(
            name='Startup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('is_visible', models.BooleanField(default=True, help_text='Startup Profiles will be published to external websites through the the API.')),
                ('short_pitch', models.CharField(help_text='Your startup in 140 characters or less.', max_length=140)),
                ('full_elevator_pitch', models.TextField(help_text='Your startup in 500 characters or less.', max_length=500)),
                ('linked_in_url', models.URLField(blank=True, max_length=100, verbose_name='LinkedIn profile URL')),
                ('facebook_url', models.URLField(blank=True, max_length=100, verbose_name='Facebook profile URL')),
                ('high_resolution_logo', sorl.thumbnail.fields.ImageField(blank=True, upload_to='startup_pics', verbose_name='High Resolution Logo')),
                ('video_elevator_pitch_url', embed_video.fields.EmbedVideoField(blank=True, help_text='Upload your 1-3 minute video pitch to Vimeo or Youtube. Paste the shared link here.', max_length=100)),
                ('acknowledgement', models.BooleanField(default=False, help_text='I understand that my Startup Profile is a pre-requisite for applying to any MassChallenge Program')),
                ('created_datetime', models.DateTimeField(blank=True, null=True)),
                ('last_updated_datetime', models.DateTimeField(blank=True, null=True)),
                ('community', models.CharField(blank=True, choices=[('red', 'Red'), ('blue', 'Blue'), ('green', 'Green')], max_length=64)),
                ('profile_background_color', models.CharField(blank=True, default='217181', max_length=7, validators=[django.core.validators.RegexValidator('^([0-9a-fA-F]{3}|[0-9a-fA-F]{6}|)$', 'Color must be 3 or 6-digit hexecimal number, such as FF0000 for red.')])),
                ('profile_text_color', models.CharField(blank=True, default='FFFFFF', max_length=7, validators=[django.core.validators.RegexValidator('^([0-9a-fA-F]{3}|[0-9a-fA-F]{6}|)$', 'Color must be 3 or 6-digit hexecimal number, such as FF0000 for red.')])),
                ('location_national', models.CharField(blank=True, default='', help_text='Please specify the country where your main office (headquarters) is located', max_length=100)),
                ('location_regional', models.CharField(blank=True, default='', help_text='Please specify the state, region or province where your main office (headquarters) is located (if applicable).', max_length=100)),
                ('location_city', models.CharField(blank=True, default='', help_text='Please specify the city where your main office (headquarters) is located. (e.g. Boston)', max_length=100)),
                ('location_postcode', models.CharField(blank=True, default='', help_text='Please specify the postal code for your main office (headquarters). (ZIP code, Postcode, codigo postal, etc.)', max_length=100)),
                ('date_founded', models.CharField(blank=True, help_text='Month and Year when your startup was founded.', max_length=100)),
                ('landing_page', models.CharField(blank=True, max_length=255, null=True)),
                ('additional_industries', models.ManyToManyField(blank=True, db_table='accelerator_startup_related_industry', help_text='You may select up to 5 related industries.', related_name='secondary_startups', to=settings.MPTT_SWAPPABLE_INDUSTRY_MODEL, verbose_name='Additional Industries')),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_CURRENCY_MODEL)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='startups', to=settings.ACCELERATOR_ORGANIZATION_MODEL)),
                ('primary_industry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='startups', to=settings.MPTT_SWAPPABLE_INDUSTRY_MODEL, verbose_name='Primary Industry categorization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Startups',
                'db_table': 'accelerator_startup',
                'ordering': ['organization__name'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_STARTUP_MODEL',
            },
        ),
        migrations.CreateModel(
            name='StartupAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('attribute_value', models.TextField(help_text='Stored text representation of the value', verbose_name='Value')),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAMSTARTUPATTRIBUTE_MODEL)),
                ('startup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_STARTUP_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Startup Attributes',
                'db_table': 'accelerator_startupattribute',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_STARTUPATTRIBUTE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='StartupCycleInterest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAMCYCLE_MODEL)),
            ],
            options={
                'db_table': 'accelerator_startupcycleinterest',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_STARTUPCYCLEINTEREST_MODEL',
            },
        ),
        migrations.CreateModel(
            name='StartupLabel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('label', models.CharField(max_length=255)),
                ('startups', models.ManyToManyField(blank=True, to=settings.ACCELERATOR_STARTUP_MODEL)),
            ],
            options={
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_STARTUPLABEL_MODEL',
            },
        ),
        migrations.CreateModel(
            name='StartupMentorRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('status', models.CharField(choices=[('Confirmed', 'Confirmed'), ('In Discussions With', 'In Discussions With'), ('Desired', 'Desired')], default='Desired', max_length=32)),
                ('primary', models.BooleanField(default=False)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Startup Mentor Relationships',
                'db_table': 'accelerator_startupmentorrelationship',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_STARTUPMENTORRELATIONSHIP_MODEL',
            },
        ),
        migrations.CreateModel(
            name='StartupMentorTrackingRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('other_mentors', models.TextField(blank=True, help_text='Add any mentors you meet with who are not listed in the MassChallenge Mentor Directory. Please provide their name, company, and email address below.', null=True, verbose_name='Additional Mentors')),
                ('notes', models.TextField(blank=True, help_text='Submit the three goals you plan to work on with your mentors during the accelerator program.', null=True, verbose_name='Program Goals')),
                ('mentors', models.ManyToManyField(help_text="Select the Mentors you would like to work with during the program. Start typing a Mentor's name; if they are in the Mentor Directory, their name should appear as you type. If you don't find the person you are looking for, use 'Other Mentors' below.", through='accelerator.StartupMentorRelationship', to=settings.AUTH_USER_MODEL, verbose_name='Registered Mentors')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL)),
                ('startup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_STARTUP_MODEL)),
            ],
            options={
                'verbose_name': 'Mentor Tracking Record',
                'verbose_name_plural': 'Mentor Tracking Records',
                'db_table': 'accelerator_startupmentortrackingrecord',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_STARTUPMENTORTRACKINGRECORD_MODEL',
            },
        ),
        migrations.CreateModel(
            name='StartupOverrideGrant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('program_override', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAMOVERRIDE_MODEL)),
                ('startup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_STARTUP_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Startup Override Grants',
                'db_table': 'accelerator_startupoverridegrant',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_STARTUPOVERRIDEGRANT_MODEL',
            },
        ),
        migrations.CreateModel(
            name='StartupProgramInterest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('order', models.PositiveIntegerField(db_index=True, editable=False)),
                ('applying', models.BooleanField(default=False)),
                ('interest_level', models.CharField(blank=True, choices=[('g', 'Definitely will participate'), ('w', 'Will participate'), ('p', 'Likely will participate'), ('n', 'Might not participate'), ('l', "Likely won't participate")], max_length=64, null=True)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL)),
                ('startup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_STARTUP_MODEL)),
                ('startup_cycle_interest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_STARTUPCYCLEINTEREST_MODEL)),
            ],
            options={
                'db_table': 'accelerator_startupprograminterest',
                'ordering': ['order'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_STARTUPPROGRAMINTEREST_MODEL',
            },
        ),
        migrations.CreateModel(
            name='StartupRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'accelerator_startuprole',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_STARTUPROLE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='StartupStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('program_startup_status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAMSTARTUPSTATUS_MODEL)),
                ('startup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_STARTUP_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Startup Statuses',
                'db_table': 'accelerator_startupstatus',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_STARTUPSTATUS_MODEL',
            },
        ),
        migrations.CreateModel(
            name='StartupTeamMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(blank=True, max_length=60)),
                ('startup_administrator', models.BooleanField(help_text='You have to have at least one administrator')),
                ('is_contact', models.BooleanField(default=False, help_text='A secondary contact for the startup')),
                ('primary_contact', models.BooleanField(default=False, help_text='You may only have one primary contact')),
                ('technical_contact', models.BooleanField(default=False)),
                ('marketing_contact', models.BooleanField(default=False)),
                ('financial_contact', models.BooleanField(default=False)),
                ('legal_contact', models.BooleanField(default=False)),
                ('product_contact', models.BooleanField(default=False)),
                ('design_contact', models.BooleanField(default=False)),
                ('display_on_public_profile', models.BooleanField(default=True)),
                ('founder', models.NullBooleanField(default=False)),
                ('startup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_STARTUP_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Startup Team Members',
                'db_table': 'accelerator_startupteammember',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_STARTUPTEAMMEMBER_MODEL',
            },
        ),
        migrations.CreateModel(
            name='UserLabel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('label', models.CharField(max_length=255)),
                ('users', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'accelerator_userlabel',
                'ordering': ['label'],
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_USERLABEL_MODEL',
            },
        ),
        migrations.CreateModel(
            name='UserLegalCheck',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('accepted', models.BooleanField(default=False)),
                ('legal_check', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_set', to=settings.ACCELERATOR_LEGALCHECK_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='legalcheck_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Legal Check',
                'db_table': 'accelerator_userlegalcheck',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_USERLEGALCHECK_MODEL',
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('url_slug', models.CharField(max_length=30)),
                ('sort_order', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'accelerator_userrole',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_USERROLE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='UserRoleMenu',
            fields=[
                ('urlnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fluent_pages.UrlNode')),
                ('program_status', models.CharField(blank=True, choices=[('upcoming', 'Upcoming'), ('active', 'Active'), ('ended', 'Ended'), ('hidden', 'Hidden')], max_length=64, null=True)),
                ('program', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL, verbose_name='Program')),
                ('program_family', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAMFAMILY_MODEL, verbose_name='Program Family')),
                ('user_role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_USERROLE_MODEL, verbose_name='User Role')),
            ],
            options={
                'verbose_name': 'User Role Menu',
                'verbose_name_plural': 'User Role Menus',
                'db_table': 'pagetype_accelerator_userrolemenu',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_USERROLEMENU_MODEL',
                'manager_inheritance_from_future': True,
            },
            bases=('fluent_pages.page',),
        ),
        migrations.CreateModel(
            name='Allocator',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('judging_round', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.ACCELERATOR_JUDGINGROUND_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Allocators',
                'db_table': 'accelerator_allocator',
                'abstract': False,
                'managed': True,
                'swappable': 'ACCELERATOR_ALLOCATOR_MODEL',
            },
        ),
        migrations.AddField(
            model_name='startupmentorrelationship',
            name='startup_mentor_tracking',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_STARTUPMENTORTRACKINGRECORD_MODEL),
        ),
        migrations.AddField(
            model_name='startupcycleinterest',
            name='interested_programs',
            field=models.ManyToManyField(through='accelerator.StartupProgramInterest', to=settings.ACCELERATOR_PROGRAM_MODEL),
        ),
        migrations.AddField(
            model_name='startupcycleinterest',
            name='startup',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_STARTUP_MODEL),
        ),
        migrations.AddField(
            model_name='scenario',
            name='applications',
            field=models.ManyToManyField(related_name='scenarios', through='accelerator.ScenarioApplication', to=settings.ACCELERATOR_APPLICATION_MODEL),
        ),
        migrations.AddField(
            model_name='scenario',
            name='judges',
            field=models.ManyToManyField(related_name='scenarios', through='accelerator.ScenarioJudge', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='scenario',
            name='judging_round',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_JUDGINGROUND_MODEL),
        ),
        migrations.AddField(
            model_name='refundcoderedemption',
            name='startup',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_STARTUP_MODEL),
        ),
        migrations.AddField(
            model_name='programstartupstatus',
            name='startup_role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_STARTUPROLE_MODEL),
        ),
        migrations.AddField(
            model_name='programrole',
            name='user_label',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dont_use_commit_fail', to=settings.ACCELERATOR_USERLABEL_MODEL),
        ),
        migrations.AddField(
            model_name='programrole',
            name='user_role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_USERROLE_MODEL),
        ),
        migrations.AddField(
            model_name='programpartner',
            name='partner_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAMPARTNERTYPE_MODEL),
        ),
        migrations.AddField(
            model_name='programpartner',
            name='program',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL),
        ),
        migrations.AddField(
            model_name='program',
            name='cycle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='programs', to=settings.ACCELERATOR_PROGRAMCYCLE_MODEL),
        ),
        migrations.AddField(
            model_name='program',
            name='mentor_program_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_NAMEDGROUP_MODEL),
        ),
        migrations.AddField(
            model_name='program',
            name='program_family',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programs', to=settings.ACCELERATOR_PROGRAMFAMILY_MODEL),
        ),
        migrations.AddField(
            model_name='paypalpayment',
            name='cycle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAMCYCLE_MODEL),
        ),
        migrations.AddField(
            model_name='paypalpayment',
            name='startup',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_STARTUP_MODEL),
        ),
        migrations.AddField(
            model_name='paneltype',
            name='judging_round',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_JUDGINGROUND_MODEL),
        ),
        migrations.AddField(
            model_name='paneltime',
            name='judging_round',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_JUDGINGROUND_MODEL),
        ),
        migrations.AddField(
            model_name='panellocation',
            name='judging_round',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_JUDGINGROUND_MODEL),
        ),
        migrations.AddField(
            model_name='panel',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PANELLOCATION_MODEL),
        ),
        migrations.AddField(
            model_name='panel',
            name='panel_time',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PANELTIME_MODEL),
        ),
        migrations.AddField(
            model_name='panel',
            name='panel_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PANELTYPE_MODEL),
        ),
        migrations.AddField(
            model_name='observer',
            name='newsletter_cc_roles',
            field=models.ManyToManyField(blank=True, to=settings.ACCELERATOR_PROGRAMROLE_MODEL),
        ),
        migrations.AddField(
            model_name='nodesubnavassociation',
            name='node',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fluent_pages.UrlNode'),
        ),
        migrations.AddField(
            model_name='nodesubnavassociation',
            name='sub_nav',
            field=models.ForeignKey(help_text='This is the sub navigation tree that this page is tied to', on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_NAVTREE_MODEL),
        ),
        migrations.AddField(
            model_name='nodesubnavassociation',
            name='sub_nav_item',
            field=models.ForeignKey(help_text='This is the sub navigation item that this page is tied to', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_NAVTREEITEM_MODEL),
        ),
        migrations.AddField(
            model_name='nodepublishedfor',
            name='node',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fluent_pages.UrlNode'),
        ),
        migrations.AddField(
            model_name='nodepublishedfor',
            name='published_for',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAMROLE_MODEL),
        ),
        migrations.AddField(
            model_name='newsletter',
            name='judging_round',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_JUDGINGROUND_MODEL),
        ),
        migrations.AddField(
            model_name='newsletter',
            name='program',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL),
        ),
        migrations.AddField(
            model_name='newsletter',
            name='recipient_roles',
            field=models.ManyToManyField(blank=True, to=settings.ACCELERATOR_PROGRAMROLE_MODEL),
        ),
        migrations.AddField(
            model_name='navtreeitem',
            name='program',
            field=models.ManyToManyField(blank=True, to=settings.ACCELERATOR_PROGRAM_MODEL),
        ),
        migrations.AddField(
            model_name='navtreeitem',
            name='program_family',
            field=models.ManyToManyField(blank=True, to=settings.ACCELERATOR_PROGRAMFAMILY_MODEL),
        ),
        migrations.AddField(
            model_name='navtreeitem',
            name='tree',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_NAVTREE_MODEL),
        ),
        migrations.AddField(
            model_name='navtreeitem',
            name='user_role',
            field=models.ManyToManyField(blank=True, to=settings.ACCELERATOR_USERROLE_MODEL),
        ),
        migrations.AddField(
            model_name='mentorprogramofficehour',
            name='program',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL),
        ),
        migrations.AddField(
            model_name='memberprofile',
            name='current_program',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL),
        ),
        migrations.AddField(
            model_name='memberprofile',
            name='interest_categories',
            field=models.ManyToManyField(blank=True, to=settings.ACCELERATOR_INTERESTCATEGORY_MODEL),
        ),
        migrations.AddField(
            model_name='memberprofile',
            name='program_families',
            field=models.ManyToManyField(blank=True, help_text='Which of our Program Families would you like to be involved with?', related_name='interested_memberprofile', to=settings.ACCELERATOR_PROGRAMFAMILY_MODEL),
        ),
        migrations.AddField(
            model_name='memberprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='judginground',
            name='application_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_APPLICATIONTYPE_MODEL),
        ),
        migrations.AddField(
            model_name='judginground',
            name='confirmed_judge_label',
            field=models.ForeignKey(blank=True, help_text='Label for Confirmed Judges', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rounds_confirmed_for', to=settings.ACCELERATOR_USERLABEL_MODEL),
        ),
        migrations.AddField(
            model_name='judginground',
            name='desired_judge_label',
            field=models.ForeignKey(blank=True, help_text='Label for Desired Judges', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rounds_desired_for', to=settings.ACCELERATOR_USERLABEL_MODEL),
        ),
        migrations.AddField(
            model_name='judginground',
            name='feedback_merge_with',
            field=models.ForeignKey(blank=True, help_text='Optional: merge the display of this feedback with another round', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_JUDGINGROUND_MODEL),
        ),
        migrations.AddField(
            model_name='judginground',
            name='judging_form',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_JUDGINGFORM_MODEL),
        ),
        migrations.AddField(
            model_name='judginground',
            name='program',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL),
        ),
        migrations.AddField(
            model_name='judginground',
            name='startup_label',
            field=models.ForeignKey(blank=True, help_text='Label for Startups', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_STARTUPLABEL_MODEL),
        ),
        migrations.AddField(
            model_name='judgeroundcommitment',
            name='judging_round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_JUDGINGROUND_MODEL),
        ),
        migrations.AddField(
            model_name='judgepanelassignment',
            name='panel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PANEL_MODEL),
        ),
        migrations.AddField(
            model_name='judgepanelassignment',
            name='scenario',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='judge_assignments', to=settings.ACCELERATOR_SCENARIO_MODEL),
        ),
        migrations.AddField(
            model_name='judgefeedbackcomponent',
            name='feedback_element',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_JUDGINGFORMELEMENT_MODEL),
        ),
        migrations.AddField(
            model_name='judgefeedbackcomponent',
            name='judge_feedback',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_JUDGEAPPLICATIONFEEDBACK_MODEL),
        ),
        migrations.AddField(
            model_name='judgeavailability',
            name='commitment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_JUDGEROUNDCOMMITMENT_MODEL),
        ),
        migrations.AddField(
            model_name='judgeavailability',
            name='panel_location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PANELLOCATION_MODEL),
        ),
        migrations.AddField(
            model_name='judgeavailability',
            name='panel_time',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PANELTIME_MODEL),
        ),
        migrations.AddField(
            model_name='judgeavailability',
            name='panel_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PANELTYPE_MODEL),
        ),
        migrations.AddField(
            model_name='judgeapplicationfeedback',
            name='form_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_JUDGINGFORM_MODEL),
        ),
        migrations.AddField(
            model_name='judgeapplicationfeedback',
            name='judge',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='judgeapplicationfeedback',
            name='panel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PANEL_MODEL),
        ),
        migrations.AddField(
            model_name='judgeapplicationfeedback',
            name='viewers',
            field=models.ManyToManyField(db_table='accelerator_judgeapplicationfeedback_viewers', related_name='viewed_feedback', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='jobposting',
            name='startup',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_STARTUP_MODEL),
        ),
        migrations.AddField(
            model_name='interestcategory',
            name='program',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL),
        ),
        migrations.AddField(
            model_name='expertprofile',
            name='additional_industries',
            field=models.ManyToManyField(db_table='accelerator_expert_related_industry', help_text='You may select up to 5 related industries. To select multiple industries, please press and hold Control (CTRL) on PCs or Command (&#8984;) on Macs.', related_name='secondary_experts', to=settings.MPTT_SWAPPABLE_INDUSTRY_MODEL, verbose_name='Additional Industries'),
        ),
        migrations.AddField(
            model_name='expertprofile',
            name='current_program',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL),
        ),
        migrations.AddField(
            model_name='expertprofile',
            name='expert_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experts', to=settings.ACCELERATOR_EXPERTCATEGORY_MODEL, verbose_name='I primarily consider myself a'),
        ),
        migrations.AddField(
            model_name='expertprofile',
            name='functional_expertise',
            field=models.ManyToManyField(blank=True, related_name='experts', to=settings.MPTT_SWAPPABLE_FUNCTIONALEXPERTISE_MODEL, verbose_name='Functional Expertise'),
        ),
        migrations.AddField(
            model_name='expertprofile',
            name='home_program_family',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAMFAMILY_MODEL, verbose_name='Home Program Family'),
        ),
        migrations.AddField(
            model_name='expertprofile',
            name='interest_categories',
            field=models.ManyToManyField(blank=True, to=settings.ACCELERATOR_INTERESTCATEGORY_MODEL),
        ),
        migrations.AddField(
            model_name='expertprofile',
            name='mentoring_specialties',
            field=models.ManyToManyField(blank=True, db_table='accelerator_expert_related_mentoringspecialty', related_name='experts', to=settings.ACCELERATOR_MENTORINGSPECIALTIES_MODEL, verbose_name='Mentoring Specialties'),
        ),
        migrations.AddField(
            model_name='expertprofile',
            name='primary_industry',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experts', to=settings.MPTT_SWAPPABLE_INDUSTRY_MODEL, verbose_name='Primary Industry'),
        ),
        migrations.AddField(
            model_name='expertprofile',
            name='program_families',
            field=models.ManyToManyField(blank=True, help_text='Which of our Program Families would you like to be involved with?', related_name='interested_expertprofile', to=settings.ACCELERATOR_PROGRAMFAMILY_MODEL),
        ),
        migrations.AddField(
            model_name='expertprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='expertinterest',
            name='interest_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interested_experts', to=settings.ACCELERATOR_EXPERTINTERESTTYPE_MODEL),
        ),
        migrations.AddField(
            model_name='expertinterest',
            name='program_family',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interested_experts', to=settings.ACCELERATOR_PROGRAMFAMILY_MODEL),
        ),
        migrations.AddField(
            model_name='expertinterest',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expert_interests', to=settings.AUTH_USER_MODEL, validators=[accelerator_abstract.models.base_expert_interest.is_expert_validator]),
        ),
        migrations.AddField(
            model_name='entrepreneurprofile',
            name='current_program',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL),
        ),
        migrations.AddField(
            model_name='entrepreneurprofile',
            name='interest_categories',
            field=models.ManyToManyField(blank=True, to=settings.ACCELERATOR_INTERESTCATEGORY_MODEL),
        ),
        migrations.AddField(
            model_name='entrepreneurprofile',
            name='program_families',
            field=models.ManyToManyField(blank=True, help_text='Which of our Program Families would you like to be involved with?', related_name='interested_entrepreneurprofile', to=settings.ACCELERATOR_PROGRAMFAMILY_MODEL),
        ),
        migrations.AddField(
            model_name='entrepreneurprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='criterion',
            name='judging_round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_JUDGINGROUND_MODEL),
        ),
        migrations.AddField(
            model_name='clearance',
            name='program_family',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_clearances', to=settings.ACCELERATOR_PROGRAMFAMILY_MODEL),
        ),
        migrations.AddField(
            model_name='clearance',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clearances', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='bucketstate',
            name='cycle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAMCYCLE_MODEL),
        ),
        migrations.AddField(
            model_name='bucketstate',
            name='program',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL),
        ),
        migrations.AddField(
            model_name='bucketstate',
            name='program_role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAMROLE_MODEL),
        ),
        migrations.AddField(
            model_name='applicationtype',
            name='submission_label',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_STARTUPLABEL_MODEL),
        ),
        migrations.AddField(
            model_name='applicationquestion',
            name='application_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_APPLICATIONTYPE_MODEL),
        ),
        migrations.AddField(
            model_name='applicationquestion',
            name='program',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PROGRAM_MODEL),
        ),
        migrations.AddField(
            model_name='applicationquestion',
            name='question',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_QUESTION_MODEL),
        ),
        migrations.AddField(
            model_name='applicationpanelassignment',
            name='panel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_PANEL_MODEL),
        ),
        migrations.AddField(
            model_name='applicationpanelassignment',
            name='scenario',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='application_assignments', to=settings.ACCELERATOR_SCENARIO_MODEL),
        ),
        migrations.AddField(
            model_name='applicationanswer',
            name='application_question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_APPLICATIONQUESTION_MODEL),
        ),
        migrations.AddField(
            model_name='application',
            name='application_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_APPLICATIONTYPE_MODEL),
        ),
        migrations.AddField(
            model_name='application',
            name='cycle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='applications', to=settings.ACCELERATOR_PROGRAMCYCLE_MODEL),
        ),
        migrations.AddField(
            model_name='application',
            name='startup',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_STARTUP_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='userlegalcheck',
            unique_together=set([('user', 'legal_check')]),
        ),
        migrations.AlterUniqueTogether(
            name='startupteammember',
            unique_together=set([('startup', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='startupstatus',
            unique_together=set([('startup', 'program_startup_status')]),
        ),
        migrations.AlterUniqueTogether(
            name='startupmentortrackingrecord',
            unique_together=set([('startup', 'program')]),
        ),
        migrations.AlterUniqueTogether(
            name='startupcycleinterest',
            unique_together=set([('cycle', 'startup')]),
        ),
        migrations.AlterUniqueTogether(
            name='siteprogramauthorization',
            unique_together=set([('site', 'program')]),
        ),
        migrations.AlterUniqueTogether(
            name='scenariopreference',
            unique_together=set([('scenario', 'priority', 'entity_type')]),
        ),
        migrations.AlterUniqueTogether(
            name='scenariojudge',
            unique_together=set([('scenario', 'judge')]),
        ),
        migrations.AlterUniqueTogether(
            name='scenarioapplication',
            unique_together=set([('scenario', 'application')]),
        ),
        migrations.AlterUniqueTogether(
            name='refundcoderedemption',
            unique_together=set([('startup', 'refund_code', 'cycle')]),
        ),
        migrations.AlterUniqueTogether(
            name='programstartupattribute',
            unique_together=set([('program', 'attribute_label')]),
        ),
        migrations.AlterUniqueTogether(
            name='programrolegrant',
            unique_together=set([('person', 'program_role')]),
        ),
        migrations.AlterUniqueTogether(
            name='programfamilylocation',
            unique_together=set([('program_family', 'location')]),
        ),
        migrations.AlterUniqueTogether(
            name='partnerteammember',
            unique_together=set([('partner', 'team_member')]),
        ),
        migrations.AlterUniqueTogether(
            name='navtreeitem',
            unique_together=set([('tree', 'title', 'url')]),
        ),
        migrations.AlterUniqueTogether(
            name='mentorprogramofficehour',
            unique_together=set([('program', 'mentor', 'start_date_time')]),
        ),
        migrations.AlterUniqueTogether(
            name='judginground',
            unique_together=set([('program', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='judgeroundcommitment',
            unique_together=set([('judge', 'judging_round')]),
        ),
        migrations.AlterUniqueTogether(
            name='judgepanelassignment',
            unique_together=set([('judge', 'panel', 'scenario')]),
        ),
        migrations.AlterUniqueTogether(
            name='judgefeedbackcomponent',
            unique_together=set([('judge_feedback', 'feedback_element')]),
        ),
        migrations.AlterIndexTogether(
            name='judgefeedbackcomponent',
            index_together=set([('id', 'judge_feedback', 'feedback_element')]),
        ),
        migrations.AlterUniqueTogether(
            name='judgeavailability',
            unique_together=set([('commitment', 'panel_location', 'panel_time', 'panel_type')]),
        ),
        migrations.AlterUniqueTogether(
            name='judgeapplicationfeedback',
            unique_together=set([('application', 'judge', 'panel')]),
        ),
        migrations.AlterUniqueTogether(
            name='clearance',
            unique_together=set([('user', 'program_family')]),
        ),
        migrations.AlterUniqueTogether(
            name='applicationpanelassignment',
            unique_together=set([('application', 'panel', 'scenario')]),
        ),
        migrations.AddField(
            model_name='allocator',
            name='scenario',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.ACCELERATOR_SCENARIO_MODEL),
        ),
    ]

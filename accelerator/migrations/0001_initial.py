# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2018-01-23 16:58
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import embed_video.fields
import mptt.fields
import sorl.thumbnail.fields
import swapper


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('created_at',
                 models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('abbr', models.CharField(max_length=3, unique=True)),
                ('usd_exchange', models.FloatField()),
            ],
            options={
                'db_table': 'accelerator_currency',
                'managed': True,
                'swappable': swapper.swappable_setting('accelerator',
                                                       'Currency'),
            },
        ),
        migrations.CreateModel(
            name='Industry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('lft',
                 models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght',
                 models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id',
                 models.PositiveIntegerField(db_index=True, editable=False)),
                ('level',
                 models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True,
                                                      on_delete=django.db.models.deletion.CASCADE,
                                                      related_name='children',
                                                      to=settings.MPTT_SWAPPABLE_INDUSTRY_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Industries',
                'swappable': swapper.swappable_setting('accelerator',
                                                       'Industry'),
                'db_table': 'accelerator_industry',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='JobPosting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('created_at',
                 models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('postdate', models.DateTimeField()),
                ('type', models.CharField(
                    choices=[('NONE', 'None'), ('INTERNSHIP', 'An internship'),
                             ('PART_TIME_PERMANENT',
                              'A part-time permanent position'), (
                             'FULL_TIME_PERMANENT',
                             'A full-time permanent position'), (
                             'PART_TIME_CONTRACT',
                             'A part-time contract position'), (
                             'FULL_TIME_CONTRACT',
                             'A full-time contract position')],
                    max_length=20)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('applicationemail',
                 models.EmailField(blank=True, max_length=100, null=True,
                                   verbose_name='Email address')),
                ('more_info_url',
                 models.URLField(blank=True, max_length=100, null=True)),
            ],
            options={
                'swappable': swapper.swappable_setting('accelerator',
                                                       'JobPosting'),
                'db_table': 'accelerator_jobposting',
                'managed': True,
                'verbose_name_plural': 'Job postings for startups',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('created_at',
                 models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('website_url', models.URLField(blank=True, max_length=100)),
                ('twitter_handle', models.CharField(blank=True,
                                                    help_text='Omit the "@". We\'ll add it.',
                                                    max_length=40)),
                ('public_inquiry_email',
                 models.EmailField(blank=True, max_length=100,
                                   verbose_name='Email address')),
                ('url_slug',
                 models.CharField(blank=True, default='', max_length=64,
                                  unique=True, validators=[
                         django.core.validators.RegexValidator(
                             message='Letters, numbers, and dashes only.',
                             regex='^[\\w-]+$')])),
            ],
            options={
                'verbose_name_plural': 'Organizations',
                'db_table': 'accelerator_organization',
                'ordering': ['name'],
                'abstract': False,
                'managed': True,
                'swappable': swapper.swappable_setting('accelerator',
                                                       'Organization'), },
        ),
        migrations.CreateModel(
            name='RecommendationTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('created_at',
                 models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('text', models.TextField()),
            ],
            options={
                'swappable': swapper.swappable_setting('accelerator',
                                                       'RecommendationTag'),
                'db_table': 'accelerator_recommendationtag',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Startup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('created_at',
                 models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('is_visible', models.BooleanField(default=True,
                                                   help_text='Startup Profiles will be published to external websites through the the API.')),
                ('short_pitch', models.CharField(
                    help_text='Your startup in 140 characters or less.',
                    max_length=140)),
                ('full_elevator_pitch', models.TextField(
                    help_text='Your startup in 500 characters or less.',
                    max_length=500)),
                ('linked_in_url', models.URLField(blank=True, max_length=100)),
                ('facebook_url', models.URLField(blank=True, max_length=100)),
                ('high_resolution_logo',
                 sorl.thumbnail.fields.ImageField(blank=True,
                                                  upload_to='startup_pics',
                                                  verbose_name='High Resolution Logo')),
                ('video_elevator_pitch_url',
                 embed_video.fields.EmbedVideoField(blank=True,
                                                    help_text="The Startup Profile video is great way to show off your startup to the judges and the broader MassChallenge community (if you're not in stealth mode). Brevity is recommended and videos should not be longer than 1-3 minutes. Please submit YouTube or Vimeo URLs.",
                                                    max_length=100)),
                ('created_datetime',
                 models.DateTimeField(blank=True, null=True)),
                ('last_updated_datetime',
                 models.DateTimeField(blank=True, null=True)),
                ('community', models.CharField(blank=True,
                                               choices=[('red', 'Red'),
                                                        ('blue', 'Blue'),
                                                        ('green', 'Green')],
                                               max_length=64)),
                ('profile_background_color',
                 models.CharField(blank=True, default='217181', max_length=7,
                                  validators=[
                                      django.core.validators.RegexValidator(
                                          '^([0-9a-fA-F]{3}|[0-9a-fA-F]{6}|)$',
                                          'Color must be 3 or 6-digit hexecimal number, such as FF0000 for red.')])),
                ('profile_text_color',
                 models.CharField(blank=True, default='FFFFFF', max_length=7,
                                  validators=[
                                      django.core.validators.RegexValidator(
                                          '^([0-9a-fA-F]{3}|[0-9a-fA-F]{6}|)$',
                                          'Color must be 3 or 6-digit hexecimal number, such as FF0000 for red.')])),
                ('location_national', models.CharField(blank=True, default='',
                                                       help_text='Please specify the country where your main office (headquarters) is located',
                                                       max_length=100)),
                ('location_regional', models.CharField(blank=True, default='',
                                                       help_text='Please specify the state, region or province where your main office (headquarters) is located (if applicable).',
                                                       max_length=100)),
                ('location_city', models.CharField(blank=True, default='',
                                                   help_text='Please specify the city where your main office (headquarters) is located. (e.g. Boston)',
                                                   max_length=100)),
                ('location_postcode', models.CharField(blank=True, default='',
                                                       help_text='Please specify the postal code for your main office (headquarters). (ZIP code, Postcode, codigo postal, etc.)',
                                                       max_length=100)),
                ('date_founded', models.CharField(blank=True,
                                                  help_text='Month and Year when your startup was founded.',
                                                  max_length=100)),
                ('landing_page',
                 models.CharField(blank=True, max_length=255, null=True)),
                ('additional_industries', models.ManyToManyField(blank=True,
                                                                 db_table='accelerator_startup_related_industry',
                                                                 help_text='You may select up to 5 related industries.',
                                                                 related_name='secondary_startups',
                                                                 to=swapper.get_model_name(
                                                                     'accelerator',
                                                                     'Industry'),
                                                                 verbose_name='Additional Industries')),
                ('currency', models.ForeignKey(blank=True, null=True,
                                               on_delete=django.db.models.deletion.CASCADE,
                                               to=swapper.get_model_name(
                                                   'accelerator',
                                                   'Currency'))),
                ('organization', models.ForeignKey(blank=True, null=True,
                                                   on_delete=django.db.models.deletion.CASCADE,
                                                   related_name='startups',
                                                   to=swapper.get_model_name(
                                                       'accelerator',
                                                       'Organization'))),
                ('primary_industry',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                   related_name='startups',
                                   to=swapper.get_model_name('accelerator',
                                                             'Industry'),
                                   verbose_name='Primary Industry categorization')),
                ('recommendation_tags', models.ManyToManyField(blank=True,
                                                               to=swapper.get_model_name(
                                                                   'accelerator',
                                                                   'RecommendationTag'))),
                ('user',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                   related_name='acc_startups',
                                   to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['organization__name'],
                'swappable': swapper.swappable_setting('accelerator',
                                                       'Startup'),
                'db_table': 'accelerator_startup',
                'managed': True,
                'verbose_name_plural': 'Startups',
            },
        ),
        migrations.AddField(
            model_name='jobposting',
            name='startup',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to=swapper.get_model_name('accelerator', 'Startup')),
        ),

        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('created_at',
                 models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('application_status', models.CharField(blank=True, choices=[
                    ('incomplete', 'Incomplete'), ('complete', 'Complete'),
                    ('submitted', 'Submitted')], max_length=64, null=True)),
                ('submission_datetime',
                 models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Applications',
                'db_table': 'accelerator_application',
                'ordering': ['startup'],
                'abstract': False,
                'managed': True,
                'swappable': swapper.swappable_setting('accelerator',
                                                       'Application'),
            },
        ),
        migrations.CreateModel(
            name='ApplicationAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('created_at',
                 models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('answer_text', models.CharField(blank=True, max_length=2000)),
                ('application',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                   to=swapper.get_model_name('accelerator', 'Application'))),
            ],
            options={
                'verbose_name_plural': 'Application Answers',
                'db_table': 'accelerator_applicationanswer',
                'abstract': False,
                'managed': True,
                'swappable': swapper.swappable_setting('accelerator',
                                                       'ApplicationAnswer'),
            },
        ),
        migrations.CreateModel(
            name='ApplicationQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('created_at',
                 models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('question_number', models.IntegerField()),
                ('section_heading',
                 models.CharField(blank=True, max_length=40)),
                (
                    'question_text',
                    models.CharField(blank=True, max_length=200)),
                ('help_text', models.CharField(blank=True, max_length=1000)),
                ('question_type', models.CharField(
                    choices=[('multiline', 'MultilineText'),
                             ('multichoice', 'MultipleChoice'),
                             ('number', 'Number')], max_length=64)),
                ('mandatory', models.BooleanField(default=False)),
                ('text_box_lines', models.IntegerField(blank=True)),
                ('text_limit', models.IntegerField(blank=True)),
                ('text_limit_units', models.CharField(blank=True, choices=[
                    ('characters', 'Characters'), ('words', 'Words')],
                                                      max_length=64)),
                ('choice_options',
                 models.CharField(blank=True, max_length=4000)),
                ('choice_layout', models.CharField(blank=True, choices=[
                    ('horizontal', 'Horizontal'), ('vertical', 'Vertical'),
                    ('dropdown', 'Dropdown')], max_length=64)),
            ],
            options={
                'abstract': False,
                'managed': True,
                'swappable': swapper.swappable_setting('accelerator',
                                                       'ApplicationQuestion'),
            },
        ),
        migrations.CreateModel(
            name='ApplicationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('created_at',
                 models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=500)),
            ],
            options={
                'abstract': False,
                'managed': True,
                'swappable': swapper.swappable_setting('accelerator',
                                                       'ApplicationType'),
            },
        ),
        migrations.CreateModel(
            name='NamedGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('created_at',
                 models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(default='', max_length=255)),
            ],
            options={
                'db_table': 'accelerator_namedgroup',
                'ordering': ['name'],
                'abstract': False,
                'managed': True,
                'swappable': swapper.swappable_setting('accelerator',
                                                       'NamedGroup'),
            },
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('created_at',
                 models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=500)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('location', models.CharField(max_length=50)),
                ('program_status', models.CharField(
                    choices=[('upcoming', 'Upcoming'), ('active', 'Active'),
                             ('ended', 'Ended'), ('hidden', 'Hidden')],
                    max_length=64)),
                ('currency_code', models.CharField(max_length=3)),
                ('early_application_fee',
                 models.DecimalField(decimal_places=2, max_digits=7)),
                ('regular_application_fee',
                 models.DecimalField(decimal_places=2, max_digits=7)),
                ('regular_fee_suffix',
                 models.CharField(blank=True, max_length=20)),
                ('interested_judge_message', models.TextField(blank=True,
                                                              help_text='You may use HTML, including links')),
                ('approved_judge_message', models.TextField(blank=True,
                                                            help_text='You may use HTML, including links')),
                ('interested_mentor_message', models.TextField(blank=True,
                                                               help_text='You may use HTML, including links')),
                ('approved_mentor_message', models.TextField(blank=True,
                                                             help_text='You may use HTML, including links')),
                ('interested_speaker_message', models.TextField(blank=True,
                                                                help_text='You may use HTML, including links')),
                ('approved_speaker_message', models.TextField(blank=True,
                                                              help_text='You may use HTML, including links')),
                ('interested_office_hours_message',
                 models.TextField(blank=True,
                                  help_text='You may use HTML, including links')),
                ('approved_office_hours_message', models.TextField(blank=True,
                                                                   help_text='You may use HTML, including links')),
                ('refund_code_support', models.CharField(
                    choices=[('enabled', 'Enabled'),
                             ('view-submitted-only', 'View Submitted Only'),
                             ('disabled', 'Disabled')], default='enabled',
                    max_length=64)),
                ('many_codes_per_partner', models.BooleanField(default=False,
                                                               help_text='If true, then a given application may apply more than one refund code from the same partner for this program',
                                                               verbose_name='Allow multiple refund codes per partner')),
                ('url_slug', models.CharField(default='', max_length=30)),
                ('accepting_mentors_and_goals',
                 models.BooleanField(default=False)),
                ('overview_start_date',
                 models.DateTimeField(blank=True, null=True)),
                ('overview_deadline_date',
                 models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Programs',
                'db_table': 'accelerator_program',
                'abstract': False,
                'managed': True,
                'swappable': swapper.swappable_setting('accelerator',
                                                       'Program'),
            },
        ),
        migrations.CreateModel(
            name='ProgramCycle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('created_at',
                 models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=128)),
                ('short_name',
                 models.CharField(blank=True, max_length=32, null=True)),
                ('applications_open', models.BooleanField(default=False)),
                ('application_open_date',
                 models.DateTimeField(blank=True, null=True)),
                ('application_early_deadline_date',
                 models.DateTimeField(blank=True, null=True)),
                ('application_final_deadline_date',
                 models.DateTimeField(blank=True, null=True)),
                ('advertised_final_deadline',
                 models.DateTimeField(blank=True, null=True)),
                ('accepting_references', models.BooleanField(default=False)),
                ('hidden', models.BooleanField(default=False)),
                ('default_application_type',
                 models.ForeignKey(blank=True, null=True,
                                   on_delete=django.db.models.deletion.CASCADE,
                                   related_name='application_type_for',
                                   to=swapper.get_model_name('accelerator',
                                                             'ApplicationType'))),
                ('default_overview_application_type',
                 models.ForeignKey(blank=True, null=True,
                                   on_delete=django.db.models.deletion.CASCADE,
                                   related_name='default_overview_application_type_for',
                                   to=swapper.get_model_name('accelerator',
                                                             'ApplicationType'))),
            ],
            options={
                'verbose_name_plural': 'program cycles',
                'db_table': 'accelerator_programcycle',
                'abstract': False,
                'managed': True,
                'swappable': swapper.swappable_setting('accelerator',
                                                       'ProgramCycle'),
            },
        ),
        migrations.CreateModel(
            name='ProgramFamily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('created_at',
                 models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=128)),
                ('short_description', models.TextField(blank=True,
                                                       help_text='You may use HTML, including links')),
                ('url_slug', models.CharField(default='', max_length=30)),
                ('email_domain', models.CharField(default='',
                                                  help_text='Base domain for role-based email',
                                                  max_length=30)),
                ('phone_number', models.CharField(default='',
                                                  help_text='Phone number for this program (local form)',
                                                  max_length=30)),
                ('physical_address', models.TextField(default='')),
                ('office_hour_bcc', models.EmailField(blank=True,
                                                      help_text='An email address to bcc whenever office hours are created, deleted, or modified in this program family',
                                                      max_length=100,
                                                      null=True)),
                ('is_open', models.BooleanField(default=True,
                                                help_text='Whether this ProgramFamily should be available to entrepreneurs and experts')),
            ],
            options={
                'verbose_name_plural': 'program families',
                'db_table': 'accelerator_programfamily',
                'abstract': False,
                'managed': True,
                'swappable': swapper.swappable_setting('accelerator',
                                                       'ProgramFamily'),
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('created_at',
                 models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=200)),
                ('question_type', models.CharField(
                    choices=[('multiline', 'MultilineText'),
                             ('multichoice', 'MultipleChoice'),
                             ('number', 'Number')], max_length=64)),
                ('choice_options',
                 models.CharField(blank=True, max_length=4000)),
                ('choice_layout', models.CharField(blank=True, choices=[
                    ('horizontal', 'Horizontal'), ('vertical', 'Vertical'),
                    ('dropdown', 'Dropdown')], max_length=64)),
            ],
            options={
                'db_table': 'accelerator_question',
                'abstract': False,
                'managed': True,
                'swappable': swapper.swappable_setting('accelerator', 
                                                       'Question'),
            },
        ),
        migrations.CreateModel(
            name='StartupLabel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('created_at',
                 models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('label', models.CharField(max_length=255)),
                ('startups', models.ManyToManyField(blank=True,
                                                    to=swapper.get_model_name('accelerator', 'Startup'))),
            ],
            options={
                'abstract': False,
                'managed': True,
                'swappable': swapper.swappable_setting('accelerator',
                                                       'StartupLabel'),
            },
        ),
        migrations.AlterModelOptions(
            name='industry',
            options={'verbose_name_plural': 'Industries'},
        ),
        migrations.AddField(
            model_name='program',
            name='cycle',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.CASCADE,
                                    related_name='programs',
                                    to=swapper.get_model_name('accelerator',
                                                              'ProgramCycle')),
        ),
        migrations.AddField(
            model_name='program',
            name='mentor_program_group',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.CASCADE,
                                    to=swapper.get_model_name('accelerator',
                                                              'NamedGroup')),
        ),
        migrations.AddField(
            model_name='program',
            name='program_family',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='programs',
                to=swapper.get_model_name('accelerator', 'ProgramFamily')),
        ),
        migrations.AddField(
            model_name='applicationtype',
            name='submission_label',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.CASCADE,
                                    to=swapper.get_model_name('accelerator',
                                                              'StartupLabel')),
        ),
        migrations.AddField(
            model_name='applicationquestion',
            name='application_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to=swapper.get_model_name('accelerator', 'ApplicationType')),
        ),
        migrations.AddField(
            model_name='applicationquestion',
            name='program',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.CASCADE,
                                    to=swapper.get_model_name('accelerator', 'Program')),
        ),
        migrations.AddField(
            model_name='applicationquestion',
            name='question',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.CASCADE,
                                    to=swapper.get_model_name('accelerator',
                                                              'Question')),
        ),
        migrations.AddField(
            model_name='applicationanswer',
            name='application_question',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to=swapper.get_model_name('accelerator',
                                          'ApplicationQuestion')),
        ),
        migrations.AddField(
            model_name='application',
            name='application_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to=swapper.get_model_name('accelerator', 'ApplicationType')),
        ),
        migrations.AddField(
            model_name='application',
            name='cycle',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.CASCADE,
                                    related_name='applications',
                                    to=swapper.get_model_name('accelerator',
                                                              'ProgramCycle')),
        ),
        migrations.AddField(
            model_name='application',
            name='startup',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to=swapper.get_model_name('accelerator', 'startup')),
        ),
    ]

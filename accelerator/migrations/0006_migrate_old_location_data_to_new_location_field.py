# -*- coding: utf-8 -*-
# Generated by Django 1.11.22 on 2019-10-02 16:55
from __future__ import unicode_literals

from django.db import migrations


location_to_name_mapping = {
    "(Phone) Provide a preferred contact number below.": 'Remote',
    "ATLAS VENTURE:  25 First Street, St 303 Cambridge": 'Other',
    "Call +1-508-244-9854 at start time.": 'Remote',
    "Cloud conference room": 'MassChallenge Boston',
    "Cobalt": 'MassChallenge Boston',
    "FOLEY & LARDNER": 'Other',
    "Fog Conference Room @ MassChallenge": 'MassChallenge Boston',
    "Lounge": 'MassChallenge Boston',
    "MC Lounge": 'MassChallenge Boston',
    "Magenta Conference Room": 'MassChallenge Boston',
    "MassChallenge Boston": 'MassChallenge Boston',
    "MassChallenge Israel - Jerusalem": 'MassChallenge Israel',
    "MassChallenge Israel - Tel Aviv": 'MassChallenge Tel Aviv',
    "MassChallenge Lounge": 'MassChallenge Boston',
    "MassChallenge Mexico": 'MassChallenge Mexico',
    "MassChallenge Rhode Island": 'MassChallenge Rhode Island',
    "MassChallenge Switzerland": 'MassChallenge Switzerland',
    "MassChallenge Texas": 'MassChallenge Austin',
    "MassChallenge Texas - Austin": 'MassChallenge Austin',
    "MassChallenge Texas - Houston": 'MassChallenge Houston',
    "MassChallenge UK": 'MassChallenge UK',
    "OFFSITE: General Catalyst Offices": 'Other',
    "OFFSITE: Third Rock Ventures": 'Other',
    "Offline w KB, entered by Matt": 'Other',
    "Other - see description": 'Other',
    "PULSE@MassChallenge": 'MassChallenge Boston',
    "Pulse@MassChallenge": 'MassChallenge Boston',
    "Remote - see description": 'Remote',
    "mc lounge": 'MassChallenge Boston',
    "phone call": 'MassChallenge Boston'
}


def migrate_office_hours_locations(apps, schema_editor):
    Location = apps.get_model('accelerator',
                              'Location')
    MentorProgramOfficeHour = apps.get_model('accelerator',
                                             'MentorProgramOfficeHour')
    location_values = set(MentorProgramOfficeHour.objects.values_list(
        "old_location", flat=True))
    for old_location in location_values:
        new_location_name = location_to_name_mapping[old_location]
        location, _ = Location.objects.get_or_create(name=new_location_name)
        MentorProgramOfficeHour.objects.filter(
            old_location=old_location).update(location=location)


class Migration(migrations.Migration):

    dependencies = [
        ('accelerator', '0005_make_location_nullable'),
    ]

    operations = [
        migrations.RunPython(
            migrate_office_hours_locations,
            migrations.RunPython.noop)
    ]

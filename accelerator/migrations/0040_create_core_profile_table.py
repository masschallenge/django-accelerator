# Generated by Django 2.2.10 on 2021-05-05 20:46

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import sorl.thumbnail.fields


MULTI_SELECT_HELP_TEXT = ("Select as many options as you feel best represent "
                          "your identity. Please press and hold Control "
                          "(CTRL) on PCs or Command (&#8984;) on Macs to "
                          "select multiple options")
PHONE_REGEX_VALIDATOR_MESSAGE = 'Digits and +()-.x only'
PROGRAM_FAMILIES_HELP_TEXT = ('Which of our Program Families would you like '
                              'to be involved with?')


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('accelerator', '0039_move_bio_to_coreprofile'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='genderchoices',
            options={'managed': True,
                     'ordering': ['name'],
                     'verbose_name': 'Gender Choice',
                     'verbose_name_plural': 'Gender Choices'},
        ),
        migrations.AlterField(
            model_name='entrepreneurprofile',
            name='ethno_racial_identification',
            field=models.ManyToManyField(
                blank=True,
                help_text=MULTI_SELECT_HELP_TEXT,
                to=settings.ACCELERATOR_ETHNORACIALIDENTITY_MODEL),
        ),
        migrations.AlterField(
            model_name='entrepreneurprofile',
            name='gender_identity',
            field=models.ManyToManyField(
                blank=True,
                help_text=MULTI_SELECT_HELP_TEXT,
                to=settings.ACCELERATOR_GENDERCHOICES_MODEL),
        ),
        migrations.AlterField(
            model_name='expertprofile',
            name='ethno_racial_identification',
            field=models.ManyToManyField(
                blank=True,
                help_text=MULTI_SELECT_HELP_TEXT,
                to=settings.ACCELERATOR_ETHNORACIALIDENTITY_MODEL),
        ),
        migrations.AlterField(
            model_name='expertprofile',
            name='gender_identity',
            field=models.ManyToManyField(
                blank=True,
                help_text=MULTI_SELECT_HELP_TEXT,
                to=settings.ACCELERATOR_GENDERCHOICES_MODEL),
        ),
        migrations.AlterField(
            model_name='memberprofile',
            name='ethno_racial_identification',
            field=models.ManyToManyField(
                blank=True,
                help_text=MULTI_SELECT_HELP_TEXT,
                to=settings.ACCELERATOR_ETHNORACIALIDENTITY_MODEL),
        ),
        migrations.AlterField(
            model_name='memberprofile',
            name='gender_identity',
            field=models.ManyToManyField(
                blank=True,
                help_text=MULTI_SELECT_HELP_TEXT,
                to=settings.ACCELERATOR_GENDERCHOICES_MODEL),
        ),
        migrations.CreateModel(
            name='CoreProfile',
            fields=[
                ('id',
                 models.AutoField(auto_created=True,
                                  primary_key=True,
                                  serialize=False,
                                  verbose_name='ID')),
                ('created_at',
                 models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('gender', models.CharField(
                    blank=True,
                    choices=[('f', 'Female'),
                             ('m', 'Male'),
                             ('p', 'Prefer Not To State'),
                             ('o', 'Other'),
                             ('', 'Unknown')],
                    default='', max_length=1, null=True)),
                ('gender_self_description', models.TextField(blank=True,
                                                             default='')),
                ('phone', models.CharField(
                    blank=True,
                    max_length=20,
                    validators=[django.core.validators.RegexValidator(
                        message=PHONE_REGEX_VALIDATOR_MESSAGE,
                        regex='^[0-9x.+() -]+$')],
                    verbose_name='Phone')),
                ('linked_in_url', models.URLField(
                    blank=True,
                    verbose_name='LinkedIn profile URL')),
                ('facebook_url', models.URLField(
                    blank=True,
                    verbose_name='Facebook profile URL')),
                ('twitter_handle', models.CharField(
                    blank=True,
                    max_length=40,
                    verbose_name='Twitter handle')),
                ('personal_website_url', models.URLField(
                    blank=True,
                    max_length=255,
                    verbose_name='Website URL')),
                ('landing_page', models.CharField(
                    blank=True,
                    max_length=200,
                    validators=[django.core.validators.RegexValidator(
                        '^[^:]*$',
                        'Must be a page within the site')],
                    verbose_name='Current landing page within the site')),
                ('image', sorl.thumbnail.fields.ImageField(
                    blank=True,
                    help_text='Suggested size: <400px on the short side',
                    upload_to='profile_pics',
                    verbose_name='Profile Picture')),
                ('drupal_id', models.IntegerField(blank=True,
                                                  null=True)),
                ('drupal_creation_date', models.DateTimeField(blank=True,
                                                              null=True)),
                ('drupal_last_login', models.DateTimeField(blank=True,
                                                           null=True)),
                ('users_last_activity', models.DateTimeField(blank=True,
                                                             null=True)),
                ('newsletter_sender', models.BooleanField(default=False)),
                ('birth_year', models.DateField(blank=True, null=True)),
                ('authorization_to_share_ethno_racial_identity',
                 models.BooleanField(default=False)),
                ('bio', models.TextField(
                    blank=True,
                    default='',
                    validators=[
                        django.core.validators.MaxLengthValidator(7500)])),
                ('current_program', models.ForeignKey(
                    blank=True,
                    null=True,
                    on_delete=django.db.models.deletion.CASCADE,
                    to=settings.ACCELERATOR_PROGRAM_MODEL)),
                ('ethno_racial_identification',
                 models.ManyToManyField(
                     blank=True,
                     help_text=MULTI_SELECT_HELP_TEXT,
                     to=settings.ACCELERATOR_ETHNORACIALIDENTITY_MODEL)),
                ('gender_identity', models.ManyToManyField(
                    blank=True,
                    help_text=MULTI_SELECT_HELP_TEXT,
                    to=settings.ACCELERATOR_GENDERCHOICES_MODEL)),
                ('interest_categories', models.ManyToManyField(
                    blank=True,
                    to=settings.ACCELERATOR_INTERESTCATEGORY_MODEL)),
                ('program_families', models.ManyToManyField(
                    blank=True,
                    help_text=PROGRAM_FAMILIES_HELP_TEXT,
                    related_name='interested_coreprofile',
                    to=settings.ACCELERATOR_PROGRAMFAMILY_MODEL)),
                ('user', models.OneToOneField(
                    on_delete=django.db.models.deletion.CASCADE,
                    to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'accelerator_coreprofile',
                'abstract': False,
                'managed': True,
                'swappable': None,
            },
        ),
    ]
